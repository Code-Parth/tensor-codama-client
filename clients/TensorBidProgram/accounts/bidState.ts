/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from "@solana/kit";

export const BID_STATE_DISCRIMINATOR = new Uint8Array([
  155, 197, 5, 97, 189, 60, 8, 183,
]);

export function getBidStateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(BID_STATE_DISCRIMINATOR);
}

export type BidState = {
  discriminator: ReadonlyUint8Array;
  version: number;
  bidAmount: bigint;
  nftMint: Address;
  bidder: Address;
  bump: ReadonlyUint8Array;
  expiry: bigint;
  margin: Option<Address>;
  reserved: ReadonlyUint8Array;
};

export type BidStateArgs = {
  version: number;
  bidAmount: number | bigint;
  nftMint: Address;
  bidder: Address;
  bump: ReadonlyUint8Array;
  expiry: number | bigint;
  margin: OptionOrNullable<Address>;
  reserved: ReadonlyUint8Array;
};

export function getBidStateEncoder(): Encoder<BidStateArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["version", getU8Encoder()],
      ["bidAmount", getU64Encoder()],
      ["nftMint", getAddressEncoder()],
      ["bidder", getAddressEncoder()],
      ["bump", fixEncoderSize(getBytesEncoder(), 1)],
      ["expiry", getI64Encoder()],
      ["margin", getOptionEncoder(getAddressEncoder())],
      ["reserved", fixEncoderSize(getBytesEncoder(), 64)],
    ]),
    (value) => ({ ...value, discriminator: BID_STATE_DISCRIMINATOR }),
  );
}

export function getBidStateDecoder(): Decoder<BidState> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["version", getU8Decoder()],
    ["bidAmount", getU64Decoder()],
    ["nftMint", getAddressDecoder()],
    ["bidder", getAddressDecoder()],
    ["bump", fixDecoderSize(getBytesDecoder(), 1)],
    ["expiry", getI64Decoder()],
    ["margin", getOptionDecoder(getAddressDecoder())],
    ["reserved", fixDecoderSize(getBytesDecoder(), 64)],
  ]);
}

export function getBidStateCodec(): Codec<BidStateArgs, BidState> {
  return combineCodec(getBidStateEncoder(), getBidStateDecoder());
}

export function decodeBidState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<BidState, TAddress>;
export function decodeBidState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<BidState, TAddress>;
export function decodeBidState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<BidState, TAddress> | MaybeAccount<BidState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getBidStateDecoder(),
  );
}

export async function fetchBidState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<BidState, TAddress>> {
  const maybeAccount = await fetchMaybeBidState(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeBidState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<BidState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeBidState(maybeAccount);
}

export async function fetchAllBidState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<BidState>[]> {
  const maybeAccounts = await fetchAllMaybeBidState(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeBidState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<BidState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeBidState(maybeAccount));
}
