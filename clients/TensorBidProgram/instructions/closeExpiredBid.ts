/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from "@solana/kit";
import { TENSOR_BID_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";

export const CLOSE_EXPIRED_BID_DISCRIMINATOR = new Uint8Array([
  83, 20, 105, 67, 248, 68, 104, 190,
]);

export function getCloseExpiredBidDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLOSE_EXPIRED_BID_DISCRIMINATOR,
  );
}

export type CloseExpiredBidInstruction<
  TProgram extends string = typeof TENSOR_BID_PROGRAM_ADDRESS,
  TAccountNftMint extends string | IAccountMeta<string> = string,
  TAccountBidState extends string | IAccountMeta<string> = string,
  TAccountBidder extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = "11111111111111111111111111111111",
  TAccountRent extends
    | string
    | IAccountMeta<string> = "SysvarRent111111111111111111111111111111111",
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountNftMint extends string
        ? ReadonlyAccount<TAccountNftMint>
        : TAccountNftMint,
      TAccountBidState extends string
        ? WritableAccount<TAccountBidState>
        : TAccountBidState,
      TAccountBidder extends string
        ? WritableAccount<TAccountBidder>
        : TAccountBidder,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type CloseExpiredBidInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type CloseExpiredBidInstructionDataArgs = object;

export function getCloseExpiredBidInstructionDataEncoder(): Encoder<CloseExpiredBidInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CLOSE_EXPIRED_BID_DISCRIMINATOR }),
  );
}

export function getCloseExpiredBidInstructionDataDecoder(): Decoder<CloseExpiredBidInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCloseExpiredBidInstructionDataCodec(): Codec<
  CloseExpiredBidInstructionDataArgs,
  CloseExpiredBidInstructionData
> {
  return combineCodec(
    getCloseExpiredBidInstructionDataEncoder(),
    getCloseExpiredBidInstructionDataDecoder(),
  );
}

export type CloseExpiredBidInput<
  TAccountNftMint extends string = string,
  TAccountBidState extends string = string,
  TAccountBidder extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> = {
  nftMint: Address<TAccountNftMint>;
  bidState: Address<TAccountBidState>;
  bidder: Address<TAccountBidder>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
};

export function getCloseExpiredBidInstruction<
  TAccountNftMint extends string,
  TAccountBidState extends string,
  TAccountBidder extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof TENSOR_BID_PROGRAM_ADDRESS,
>(
  input: CloseExpiredBidInput<
    TAccountNftMint,
    TAccountBidState,
    TAccountBidder,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress },
): CloseExpiredBidInstruction<
  TProgramAddress,
  TAccountNftMint,
  TAccountBidState,
  TAccountBidder,
  TAccountSystemProgram,
  TAccountRent
> {
  // Program address.
  const programAddress = config?.programAddress ?? TENSOR_BID_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    nftMint: { value: input.nftMint ?? null, isWritable: false },
    bidState: { value: input.bidState ?? null, isWritable: true },
    bidder: { value: input.bidder ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      "SysvarRent111111111111111111111111111111111" as Address<"SysvarRent111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.nftMint),
      getAccountMeta(accounts.bidState),
      getAccountMeta(accounts.bidder),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getCloseExpiredBidInstructionDataEncoder().encode({}),
  } as CloseExpiredBidInstruction<
    TProgramAddress,
    TAccountNftMint,
    TAccountBidState,
    TAccountBidder,
    TAccountSystemProgram,
    TAccountRent
  >;

  return instruction;
}

export type ParsedCloseExpiredBidInstruction<
  TProgram extends string = typeof TENSOR_BID_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    nftMint: TAccountMetas[0];
    bidState: TAccountMetas[1];
    bidder: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
    rent: TAccountMetas[4];
  };
  data: CloseExpiredBidInstructionData;
};

export function parseCloseExpiredBidInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedCloseExpiredBidInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      nftMint: getNextAccount(),
      bidState: getNextAccount(),
      bidder: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getCloseExpiredBidInstructionDataDecoder().decode(instruction.data),
  };
}
