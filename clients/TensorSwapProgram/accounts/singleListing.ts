/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from "@solana/kit";

export const SINGLE_LISTING_DISCRIMINATOR = new Uint8Array([
  14, 114, 212, 140, 24, 134, 31, 24,
]);

export function getSingleListingDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SINGLE_LISTING_DISCRIMINATOR,
  );
}

export type SingleListing = {
  discriminator: ReadonlyUint8Array;
  owner: Address;
  nftMint: Address;
  price: bigint;
  bump: ReadonlyUint8Array;
  reserved: ReadonlyUint8Array;
};

export type SingleListingArgs = {
  owner: Address;
  nftMint: Address;
  price: number | bigint;
  bump: ReadonlyUint8Array;
  reserved: ReadonlyUint8Array;
};

export function getSingleListingEncoder(): Encoder<SingleListingArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["owner", getAddressEncoder()],
      ["nftMint", getAddressEncoder()],
      ["price", getU64Encoder()],
      ["bump", fixEncoderSize(getBytesEncoder(), 1)],
      ["reserved", fixEncoderSize(getBytesEncoder(), 64)],
    ]),
    (value) => ({ ...value, discriminator: SINGLE_LISTING_DISCRIMINATOR }),
  );
}

export function getSingleListingDecoder(): Decoder<SingleListing> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["owner", getAddressDecoder()],
    ["nftMint", getAddressDecoder()],
    ["price", getU64Decoder()],
    ["bump", fixDecoderSize(getBytesDecoder(), 1)],
    ["reserved", fixDecoderSize(getBytesDecoder(), 64)],
  ]);
}

export function getSingleListingCodec(): Codec<
  SingleListingArgs,
  SingleListing
> {
  return combineCodec(getSingleListingEncoder(), getSingleListingDecoder());
}

export function decodeSingleListing<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<SingleListing, TAddress>;
export function decodeSingleListing<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<SingleListing, TAddress>;
export function decodeSingleListing<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<SingleListing, TAddress> | MaybeAccount<SingleListing, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getSingleListingDecoder(),
  );
}

export async function fetchSingleListing<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<SingleListing, TAddress>> {
  const maybeAccount = await fetchMaybeSingleListing(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeSingleListing<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<SingleListing, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeSingleListing(maybeAccount);
}

export async function fetchAllSingleListing(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<SingleListing>[]> {
  const maybeAccounts = await fetchAllMaybeSingleListing(
    rpc,
    addresses,
    config,
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeSingleListing(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<SingleListing>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeSingleListing(maybeAccount));
}

export function getSingleListingSize(): number {
  return 145;
}
