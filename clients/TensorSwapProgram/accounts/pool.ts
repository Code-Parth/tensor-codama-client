/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from "@solana/kit";
import {
  getFrozenDecoder,
  getFrozenEncoder,
  getPoolConfigDecoder,
  getPoolConfigEncoder,
  getPoolStatsDecoder,
  getPoolStatsEncoder,
  type Frozen,
  type FrozenArgs,
  type PoolConfig,
  type PoolConfigArgs,
  type PoolStats,
  type PoolStatsArgs,
} from "../types";

export const POOL_DISCRIMINATOR = new Uint8Array([
  241, 154, 109, 4, 17, 177, 109, 188,
]);

export function getPoolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(POOL_DISCRIMINATOR);
}

export type Pool = {
  discriminator: ReadonlyUint8Array;
  version: number;
  bump: ReadonlyUint8Array;
  solEscrowBump: ReadonlyUint8Array;
  /** Unix timestamp in seconds when pool was created */
  createdUnixSeconds: bigint;
  config: PoolConfig;
  tswap: Address;
  owner: Address;
  whitelist: Address;
  /**
   * Used by Trade / Token pools only, but always initiated
   * Amount to spend is implied by balance - rent
   * (!) for margin accounts this should always be empty EXCEPT when we move frozen amount in
   */
  solEscrow: Address;
  /** How many times a taker has SOLD into the pool */
  takerSellCount: number;
  /** How many times a taker has BOUGHT from the pool */
  takerBuyCount: number;
  nftsHeld: number;
  nftAuthority: Address;
  /** All stats incorporate both 1)carried over and 2)current data */
  stats: PoolStats;
  /** If margin account present, means it's a marginated pool (currently bids only) */
  margin: Option<Address>;
  /** Offchain actor signs off to make sure an offchain condition is met (eg trait present) */
  isCosigned: boolean;
  /**
   * Order type for indexing ease (anchor enums annoying, so using a u8)
   * 0 = standard, 1 = sniping (in the future eg 2 = take profit, etc)
   */
  orderType: number;
  /**
   * Order is being executed by an offchain party and can't be modified at this time
   * incl. deposit/withdraw/edit/close/buy/sell
   */
  frozen: Option<Frozen>;
  /** Last time a buy or sell order has been executed */
  lastTransactedSeconds: bigint;
  /** Limit how many buys a pool can execute - useful for cross-margin, else keeps buying into infinity */
  maxTakerSellCount: number;
};

export type PoolArgs = {
  version: number;
  bump: ReadonlyUint8Array;
  solEscrowBump: ReadonlyUint8Array;
  /** Unix timestamp in seconds when pool was created */
  createdUnixSeconds: number | bigint;
  config: PoolConfigArgs;
  tswap: Address;
  owner: Address;
  whitelist: Address;
  /**
   * Used by Trade / Token pools only, but always initiated
   * Amount to spend is implied by balance - rent
   * (!) for margin accounts this should always be empty EXCEPT when we move frozen amount in
   */
  solEscrow: Address;
  /** How many times a taker has SOLD into the pool */
  takerSellCount: number;
  /** How many times a taker has BOUGHT from the pool */
  takerBuyCount: number;
  nftsHeld: number;
  nftAuthority: Address;
  /** All stats incorporate both 1)carried over and 2)current data */
  stats: PoolStatsArgs;
  /** If margin account present, means it's a marginated pool (currently bids only) */
  margin: OptionOrNullable<Address>;
  /** Offchain actor signs off to make sure an offchain condition is met (eg trait present) */
  isCosigned: boolean;
  /**
   * Order type for indexing ease (anchor enums annoying, so using a u8)
   * 0 = standard, 1 = sniping (in the future eg 2 = take profit, etc)
   */
  orderType: number;
  /**
   * Order is being executed by an offchain party and can't be modified at this time
   * incl. deposit/withdraw/edit/close/buy/sell
   */
  frozen: OptionOrNullable<FrozenArgs>;
  /** Last time a buy or sell order has been executed */
  lastTransactedSeconds: number | bigint;
  /** Limit how many buys a pool can execute - useful for cross-margin, else keeps buying into infinity */
  maxTakerSellCount: number;
};

export function getPoolEncoder(): Encoder<PoolArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["version", getU8Encoder()],
      ["bump", fixEncoderSize(getBytesEncoder(), 1)],
      ["solEscrowBump", fixEncoderSize(getBytesEncoder(), 1)],
      ["createdUnixSeconds", getI64Encoder()],
      ["config", getPoolConfigEncoder()],
      ["tswap", getAddressEncoder()],
      ["owner", getAddressEncoder()],
      ["whitelist", getAddressEncoder()],
      ["solEscrow", getAddressEncoder()],
      ["takerSellCount", getU32Encoder()],
      ["takerBuyCount", getU32Encoder()],
      ["nftsHeld", getU32Encoder()],
      ["nftAuthority", getAddressEncoder()],
      ["stats", getPoolStatsEncoder()],
      ["margin", getOptionEncoder(getAddressEncoder())],
      ["isCosigned", getBooleanEncoder()],
      ["orderType", getU8Encoder()],
      ["frozen", getOptionEncoder(getFrozenEncoder())],
      ["lastTransactedSeconds", getI64Encoder()],
      ["maxTakerSellCount", getU32Encoder()],
    ]),
    (value) => ({ ...value, discriminator: POOL_DISCRIMINATOR }),
  );
}

export function getPoolDecoder(): Decoder<Pool> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["version", getU8Decoder()],
    ["bump", fixDecoderSize(getBytesDecoder(), 1)],
    ["solEscrowBump", fixDecoderSize(getBytesDecoder(), 1)],
    ["createdUnixSeconds", getI64Decoder()],
    ["config", getPoolConfigDecoder()],
    ["tswap", getAddressDecoder()],
    ["owner", getAddressDecoder()],
    ["whitelist", getAddressDecoder()],
    ["solEscrow", getAddressDecoder()],
    ["takerSellCount", getU32Decoder()],
    ["takerBuyCount", getU32Decoder()],
    ["nftsHeld", getU32Decoder()],
    ["nftAuthority", getAddressDecoder()],
    ["stats", getPoolStatsDecoder()],
    ["margin", getOptionDecoder(getAddressDecoder())],
    ["isCosigned", getBooleanDecoder()],
    ["orderType", getU8Decoder()],
    ["frozen", getOptionDecoder(getFrozenDecoder())],
    ["lastTransactedSeconds", getI64Decoder()],
    ["maxTakerSellCount", getU32Decoder()],
  ]);
}

export function getPoolCodec(): Codec<PoolArgs, Pool> {
  return combineCodec(getPoolEncoder(), getPoolDecoder());
}

export function decodePool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<Pool, TAddress>;
export function decodePool<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<Pool, TAddress>;
export function decodePool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<Pool, TAddress> | MaybeAccount<Pool, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPoolDecoder(),
  );
}

export async function fetchPool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<Pool, TAddress>> {
  const maybeAccount = await fetchMaybePool(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<Pool, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePool(maybeAccount);
}

export async function fetchAllPool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<Pool>[]> {
  const maybeAccounts = await fetchAllMaybePool(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<Pool>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodePool(maybeAccount));
}
