/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from "@solana/kit";

export const SOL_ESCROW_DISCRIMINATOR = new Uint8Array([
  75, 199, 250, 63, 244, 209, 235, 120,
]);

export function getSolEscrowDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(SOL_ESCROW_DISCRIMINATOR);
}

export type SolEscrow = { discriminator: ReadonlyUint8Array };

export type SolEscrowArgs = object;

export function getSolEscrowEncoder(): Encoder<SolEscrowArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: SOL_ESCROW_DISCRIMINATOR }),
  );
}

export function getSolEscrowDecoder(): Decoder<SolEscrow> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getSolEscrowCodec(): Codec<SolEscrowArgs, SolEscrow> {
  return combineCodec(getSolEscrowEncoder(), getSolEscrowDecoder());
}

export function decodeSolEscrow<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<SolEscrow, TAddress>;
export function decodeSolEscrow<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<SolEscrow, TAddress>;
export function decodeSolEscrow<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<SolEscrow, TAddress> | MaybeAccount<SolEscrow, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getSolEscrowDecoder(),
  );
}

export async function fetchSolEscrow<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<SolEscrow, TAddress>> {
  const maybeAccount = await fetchMaybeSolEscrow(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeSolEscrow<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<SolEscrow, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeSolEscrow(maybeAccount);
}

export async function fetchAllSolEscrow(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<SolEscrow>[]> {
  const maybeAccounts = await fetchAllMaybeSolEscrow(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeSolEscrow(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<SolEscrow>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeSolEscrow(maybeAccount));
}

export function getSolEscrowSize(): number {
  return 8;
}
