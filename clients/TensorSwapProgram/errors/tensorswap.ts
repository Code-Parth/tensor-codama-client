/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from "@solana/kit";
import { TENSORSWAP_PROGRAM_ADDRESS } from "../programs";

/** InvalidProof: invalid merkle proof, token not whitelisted */
export const TENSORSWAP_ERROR__INVALID_PROOF = 0x1770; // 6000
/** WhitelistNotVerified: whitelist not verified -- currently only verified pools supported */
export const TENSORSWAP_ERROR__WHITELIST_NOT_VERIFIED = 0x1771; // 6001
/** BadWhitelist: unexpected whitelist address */
export const TENSORSWAP_ERROR__BAD_WHITELIST = 0x1772; // 6002
/** WrongPoolType: operation not permitted on this pool type */
export const TENSORSWAP_ERROR__WRONG_POOL_TYPE = 0x1773; // 6003
/** BadFeeAccount: fee account doesn't match that stored on pool */
export const TENSORSWAP_ERROR__BAD_FEE_ACCOUNT = 0x1774; // 6004
/** BadEscrowAccount: escrow account doesn't match that stored on pool */
export const TENSORSWAP_ERROR__BAD_ESCROW_ACCOUNT = 0x1775; // 6005
/** MissingFees: when setting up a Trade pool, must provide fee bps & fee vault */
export const TENSORSWAP_ERROR__MISSING_FEES = 0x1776; // 6006
/** FeesTooHigh: fees entered above allowed threshold */
export const TENSORSWAP_ERROR__FEES_TOO_HIGH = 0x1777; // 6007
/** DeltaTooLarge: delta too large */
export const TENSORSWAP_ERROR__DELTA_TOO_LARGE = 0x1778; // 6008
/** ArithmeticError: arithmetic error */
export const TENSORSWAP_ERROR__ARITHMETIC_ERROR = 0x1779; // 6009
/** WrongPool: this nft doesnt belong to this pool */
export const TENSORSWAP_ERROR__WRONG_POOL = 0x177a; // 6010
/** RoyaltiesEnabled: royalties are enabled always */
export const TENSORSWAP_ERROR__ROYALTIES_ENABLED = 0x177b; // 6011
/** PriceMismatch: specified price not within current price */
export const TENSORSWAP_ERROR__PRICE_MISMATCH = 0x177c; // 6012
/** ExistingNfts: cannot close pool with nfts in escrow -- withdraw all before closing */
export const TENSORSWAP_ERROR__EXISTING_NFTS = 0x177d; // 6013
/** WrongMint: wrong mint passed for provided accounts */
export const TENSORSWAP_ERROR__WRONG_MINT = 0x177e; // 6014
/** InsufficientTswapAccBalance: insufficient Tswap account balance */
export const TENSORSWAP_ERROR__INSUFFICIENT_TSWAP_ACC_BALANCE = 0x177f; // 6015
/** BadOwner: bad owner */
export const TENSORSWAP_ERROR__BAD_OWNER = 0x1780; // 6016
/** FeesNotAllowed: fees not allowed for non-trade pools */
export const TENSORSWAP_ERROR__FEES_NOT_ALLOWED = 0x1781; // 6017
/** BadMetadata: metadata account does not match */
export const TENSORSWAP_ERROR__BAD_METADATA = 0x1782; // 6018
/** CreatorMismatch: provided creator address does not match metadata creator */
export const TENSORSWAP_ERROR__CREATOR_MISMATCH = 0x1783; // 6019
/** WrongPoolVersion: wrong pool version provided */
export const TENSORSWAP_ERROR__WRONG_POOL_VERSION = 0x1784; // 6020
/** PoolsAreTheSame: new pool should not match old pool */
export const TENSORSWAP_ERROR__POOLS_ARE_THE_SAME = 0x1785; // 6021
/** WrongAuthority: wrong nft authority account provided */
export const TENSORSWAP_ERROR__WRONG_AUTHORITY = 0x1786; // 6022
/** FrozenAmountMismatch: amount frozen doesnt match current price */
export const TENSORSWAP_ERROR__FROZEN_AMOUNT_MISMATCH = 0x1787; // 6023
/** BadMintProof: mint proof account does not match */
export const TENSORSWAP_ERROR__BAD_MINT_PROOF = 0x1788; // 6024
/** BadCosigner: bad cosigner passed - either wrong key or no signature */
export const TENSORSWAP_ERROR__BAD_COSIGNER = 0x1789; // 6025
/** PoolFrozen: pool is frozen and cannot execute normal operations */
export const TENSORSWAP_ERROR__POOL_FROZEN = 0x178a; // 6026
/** BadMargin: bad margin account passed */
export const TENSORSWAP_ERROR__BAD_MARGIN = 0x178b; // 6027
/** PoolNotMarginated: expected a marginated pool to be passed in */
export const TENSORSWAP_ERROR__POOL_NOT_MARGINATED = 0x178c; // 6028
/** PoolMarginated: expected a non-marginated pool to be passed in */
export const TENSORSWAP_ERROR__POOL_MARGINATED = 0x178d; // 6029
/** WrongOrderType: wrong order type */
export const TENSORSWAP_ERROR__WRONG_ORDER_TYPE = 0x178e; // 6030
/** WrongFrozenStatus: wrong frozen status */
export const TENSORSWAP_ERROR__WRONG_FROZEN_STATUS = 0x178f; // 6031
/** MarginInUse: margin account has pools open and is in use */
export const TENSORSWAP_ERROR__MARGIN_IN_USE = 0x1790; // 6032
/** MaxTakerSellCountExceeded: max taker sell count exceeded, pool cannot buy anymore NFTs */
export const TENSORSWAP_ERROR__MAX_TAKER_SELL_COUNT_EXCEEDED = 0x1791; // 6033
/** MaxTakerSellCountTooSmall: max taker sell count is too small */
export const TENSORSWAP_ERROR__MAX_TAKER_SELL_COUNT_TOO_SMALL = 0x1792; // 6034
/** BadRuleSet: rule set for programmable nft does not match */
export const TENSORSWAP_ERROR__BAD_RULE_SET = 0x1793; // 6035
/** PoolFeesCompounded: this pool compounds fees and they cannot be withdrawn separately */
export const TENSORSWAP_ERROR__POOL_FEES_COMPOUNDED = 0x1794; // 6036
/** BadRoyaltiesPct: royalties percentage passed in must be between 0 and 100 */
export const TENSORSWAP_ERROR__BAD_ROYALTIES_PCT = 0x1795; // 6037
/** StartingPriceTooSmall: starting price can't be smaller than 1 lamport */
export const TENSORSWAP_ERROR__STARTING_PRICE_TOO_SMALL = 0x1796; // 6038

export type TensorswapError =
  | typeof TENSORSWAP_ERROR__ARITHMETIC_ERROR
  | typeof TENSORSWAP_ERROR__BAD_COSIGNER
  | typeof TENSORSWAP_ERROR__BAD_ESCROW_ACCOUNT
  | typeof TENSORSWAP_ERROR__BAD_FEE_ACCOUNT
  | typeof TENSORSWAP_ERROR__BAD_MARGIN
  | typeof TENSORSWAP_ERROR__BAD_METADATA
  | typeof TENSORSWAP_ERROR__BAD_MINT_PROOF
  | typeof TENSORSWAP_ERROR__BAD_OWNER
  | typeof TENSORSWAP_ERROR__BAD_ROYALTIES_PCT
  | typeof TENSORSWAP_ERROR__BAD_RULE_SET
  | typeof TENSORSWAP_ERROR__BAD_WHITELIST
  | typeof TENSORSWAP_ERROR__CREATOR_MISMATCH
  | typeof TENSORSWAP_ERROR__DELTA_TOO_LARGE
  | typeof TENSORSWAP_ERROR__EXISTING_NFTS
  | typeof TENSORSWAP_ERROR__FEES_NOT_ALLOWED
  | typeof TENSORSWAP_ERROR__FEES_TOO_HIGH
  | typeof TENSORSWAP_ERROR__FROZEN_AMOUNT_MISMATCH
  | typeof TENSORSWAP_ERROR__INSUFFICIENT_TSWAP_ACC_BALANCE
  | typeof TENSORSWAP_ERROR__INVALID_PROOF
  | typeof TENSORSWAP_ERROR__MARGIN_IN_USE
  | typeof TENSORSWAP_ERROR__MAX_TAKER_SELL_COUNT_EXCEEDED
  | typeof TENSORSWAP_ERROR__MAX_TAKER_SELL_COUNT_TOO_SMALL
  | typeof TENSORSWAP_ERROR__MISSING_FEES
  | typeof TENSORSWAP_ERROR__POOL_FEES_COMPOUNDED
  | typeof TENSORSWAP_ERROR__POOL_FROZEN
  | typeof TENSORSWAP_ERROR__POOL_MARGINATED
  | typeof TENSORSWAP_ERROR__POOL_NOT_MARGINATED
  | typeof TENSORSWAP_ERROR__POOLS_ARE_THE_SAME
  | typeof TENSORSWAP_ERROR__PRICE_MISMATCH
  | typeof TENSORSWAP_ERROR__ROYALTIES_ENABLED
  | typeof TENSORSWAP_ERROR__STARTING_PRICE_TOO_SMALL
  | typeof TENSORSWAP_ERROR__WHITELIST_NOT_VERIFIED
  | typeof TENSORSWAP_ERROR__WRONG_AUTHORITY
  | typeof TENSORSWAP_ERROR__WRONG_FROZEN_STATUS
  | typeof TENSORSWAP_ERROR__WRONG_MINT
  | typeof TENSORSWAP_ERROR__WRONG_ORDER_TYPE
  | typeof TENSORSWAP_ERROR__WRONG_POOL
  | typeof TENSORSWAP_ERROR__WRONG_POOL_TYPE
  | typeof TENSORSWAP_ERROR__WRONG_POOL_VERSION;

let tensorswapErrorMessages: Record<TensorswapError, string> | undefined;
if (process.env.NODE_ENV !== "production") {
  tensorswapErrorMessages = {
    [TENSORSWAP_ERROR__ARITHMETIC_ERROR]: `arithmetic error`,
    [TENSORSWAP_ERROR__BAD_COSIGNER]: `bad cosigner passed - either wrong key or no signature`,
    [TENSORSWAP_ERROR__BAD_ESCROW_ACCOUNT]: `escrow account doesn't match that stored on pool`,
    [TENSORSWAP_ERROR__BAD_FEE_ACCOUNT]: `fee account doesn't match that stored on pool`,
    [TENSORSWAP_ERROR__BAD_MARGIN]: `bad margin account passed`,
    [TENSORSWAP_ERROR__BAD_METADATA]: `metadata account does not match`,
    [TENSORSWAP_ERROR__BAD_MINT_PROOF]: `mint proof account does not match`,
    [TENSORSWAP_ERROR__BAD_OWNER]: `bad owner`,
    [TENSORSWAP_ERROR__BAD_ROYALTIES_PCT]: `royalties percentage passed in must be between 0 and 100`,
    [TENSORSWAP_ERROR__BAD_RULE_SET]: `rule set for programmable nft does not match`,
    [TENSORSWAP_ERROR__BAD_WHITELIST]: `unexpected whitelist address`,
    [TENSORSWAP_ERROR__CREATOR_MISMATCH]: `provided creator address does not match metadata creator`,
    [TENSORSWAP_ERROR__DELTA_TOO_LARGE]: `delta too large`,
    [TENSORSWAP_ERROR__EXISTING_NFTS]: `cannot close pool with nfts in escrow -- withdraw all before closing`,
    [TENSORSWAP_ERROR__FEES_NOT_ALLOWED]: `fees not allowed for non-trade pools`,
    [TENSORSWAP_ERROR__FEES_TOO_HIGH]: `fees entered above allowed threshold`,
    [TENSORSWAP_ERROR__FROZEN_AMOUNT_MISMATCH]: `amount frozen doesnt match current price`,
    [TENSORSWAP_ERROR__INSUFFICIENT_TSWAP_ACC_BALANCE]: `insufficient Tswap account balance`,
    [TENSORSWAP_ERROR__INVALID_PROOF]: `invalid merkle proof, token not whitelisted`,
    [TENSORSWAP_ERROR__MARGIN_IN_USE]: `margin account has pools open and is in use`,
    [TENSORSWAP_ERROR__MAX_TAKER_SELL_COUNT_EXCEEDED]: `max taker sell count exceeded, pool cannot buy anymore NFTs`,
    [TENSORSWAP_ERROR__MAX_TAKER_SELL_COUNT_TOO_SMALL]: `max taker sell count is too small`,
    [TENSORSWAP_ERROR__MISSING_FEES]: `when setting up a Trade pool, must provide fee bps & fee vault`,
    [TENSORSWAP_ERROR__POOL_FEES_COMPOUNDED]: `this pool compounds fees and they cannot be withdrawn separately`,
    [TENSORSWAP_ERROR__POOL_FROZEN]: `pool is frozen and cannot execute normal operations`,
    [TENSORSWAP_ERROR__POOL_MARGINATED]: `expected a non-marginated pool to be passed in`,
    [TENSORSWAP_ERROR__POOL_NOT_MARGINATED]: `expected a marginated pool to be passed in`,
    [TENSORSWAP_ERROR__POOLS_ARE_THE_SAME]: `new pool should not match old pool`,
    [TENSORSWAP_ERROR__PRICE_MISMATCH]: `specified price not within current price`,
    [TENSORSWAP_ERROR__ROYALTIES_ENABLED]: `royalties are enabled always`,
    [TENSORSWAP_ERROR__STARTING_PRICE_TOO_SMALL]: `starting price can't be smaller than 1 lamport`,
    [TENSORSWAP_ERROR__WHITELIST_NOT_VERIFIED]: `whitelist not verified -- currently only verified pools supported`,
    [TENSORSWAP_ERROR__WRONG_AUTHORITY]: `wrong nft authority account provided`,
    [TENSORSWAP_ERROR__WRONG_FROZEN_STATUS]: `wrong frozen status`,
    [TENSORSWAP_ERROR__WRONG_MINT]: `wrong mint passed for provided accounts`,
    [TENSORSWAP_ERROR__WRONG_ORDER_TYPE]: `wrong order type`,
    [TENSORSWAP_ERROR__WRONG_POOL]: `this nft doesnt belong to this pool`,
    [TENSORSWAP_ERROR__WRONG_POOL_TYPE]: `operation not permitted on this pool type`,
    [TENSORSWAP_ERROR__WRONG_POOL_VERSION]: `wrong pool version provided`,
  };
}

export function getTensorswapErrorMessage(code: TensorswapError): string {
  if (process.env.NODE_ENV !== "production") {
    return (tensorswapErrorMessages as Record<TensorswapError, string>)[code];
  }

  return "Error message not available in production bundles.";
}

export function isTensorswapError<TProgramErrorCode extends TensorswapError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode,
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    TENSORSWAP_PROGRAM_ADDRESS,
    code,
  );
}
