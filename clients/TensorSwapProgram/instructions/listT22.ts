/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { TENSORSWAP_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";

export const LIST_T22_DISCRIMINATOR = new Uint8Array([
  9, 117, 93, 230, 221, 4, 199, 212,
]);

export function getListT22DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(LIST_T22_DISCRIMINATOR);
}

export type ListT22Instruction<
  TProgram extends string = typeof TENSORSWAP_PROGRAM_ADDRESS,
  TAccountTswap extends string | IAccountMeta<string> = string,
  TAccountNftSource extends string | IAccountMeta<string> = string,
  TAccountNftMint extends string | IAccountMeta<string> = string,
  TAccountNftEscrow extends string | IAccountMeta<string> = string,
  TAccountSingleListing extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = "11111111111111111111111111111111",
  TAccountPayer extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountTswap extends string
        ? ReadonlyAccount<TAccountTswap>
        : TAccountTswap,
      TAccountNftSource extends string
        ? WritableAccount<TAccountNftSource>
        : TAccountNftSource,
      TAccountNftMint extends string
        ? ReadonlyAccount<TAccountNftMint>
        : TAccountNftMint,
      TAccountNftEscrow extends string
        ? WritableAccount<TAccountNftEscrow>
        : TAccountNftEscrow,
      TAccountSingleListing extends string
        ? WritableAccount<TAccountSingleListing>
        : TAccountSingleListing,
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      ...TRemainingAccounts,
    ]
  >;

export type ListT22InstructionData = {
  discriminator: ReadonlyUint8Array;
  price: bigint;
};

export type ListT22InstructionDataArgs = { price: number | bigint };

export function getListT22InstructionDataEncoder(): Encoder<ListT22InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["price", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: LIST_T22_DISCRIMINATOR }),
  );
}

export function getListT22InstructionDataDecoder(): Decoder<ListT22InstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["price", getU64Decoder()],
  ]);
}

export function getListT22InstructionDataCodec(): Codec<
  ListT22InstructionDataArgs,
  ListT22InstructionData
> {
  return combineCodec(
    getListT22InstructionDataEncoder(),
    getListT22InstructionDataDecoder(),
  );
}

export type ListT22Input<
  TAccountTswap extends string = string,
  TAccountNftSource extends string = string,
  TAccountNftMint extends string = string,
  TAccountNftEscrow extends string = string,
  TAccountSingleListing extends string = string,
  TAccountOwner extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountPayer extends string = string,
> = {
  tswap: Address<TAccountTswap>;
  nftSource: Address<TAccountNftSource>;
  nftMint: Address<TAccountNftMint>;
  nftEscrow: Address<TAccountNftEscrow>;
  singleListing: Address<TAccountSingleListing>;
  owner: TransactionSigner<TAccountOwner>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  payer: TransactionSigner<TAccountPayer>;
  price: ListT22InstructionDataArgs["price"];
};

export function getListT22Instruction<
  TAccountTswap extends string,
  TAccountNftSource extends string,
  TAccountNftMint extends string,
  TAccountNftEscrow extends string,
  TAccountSingleListing extends string,
  TAccountOwner extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountPayer extends string,
  TProgramAddress extends Address = typeof TENSORSWAP_PROGRAM_ADDRESS,
>(
  input: ListT22Input<
    TAccountTswap,
    TAccountNftSource,
    TAccountNftMint,
    TAccountNftEscrow,
    TAccountSingleListing,
    TAccountOwner,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountPayer
  >,
  config?: { programAddress?: TProgramAddress },
): ListT22Instruction<
  TProgramAddress,
  TAccountTswap,
  TAccountNftSource,
  TAccountNftMint,
  TAccountNftEscrow,
  TAccountSingleListing,
  TAccountOwner,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountPayer
> {
  // Program address.
  const programAddress = config?.programAddress ?? TENSORSWAP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    tswap: { value: input.tswap ?? null, isWritable: false },
    nftSource: { value: input.nftSource ?? null, isWritable: true },
    nftMint: { value: input.nftMint ?? null, isWritable: false },
    nftEscrow: { value: input.nftEscrow ?? null, isWritable: true },
    singleListing: { value: input.singleListing ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.tswap),
      getAccountMeta(accounts.nftSource),
      getAccountMeta(accounts.nftMint),
      getAccountMeta(accounts.nftEscrow),
      getAccountMeta(accounts.singleListing),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.payer),
    ],
    programAddress,
    data: getListT22InstructionDataEncoder().encode(
      args as ListT22InstructionDataArgs,
    ),
  } as ListT22Instruction<
    TProgramAddress,
    TAccountTswap,
    TAccountNftSource,
    TAccountNftMint,
    TAccountNftEscrow,
    TAccountSingleListing,
    TAccountOwner,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountPayer
  >;

  return instruction;
}

export type ParsedListT22Instruction<
  TProgram extends string = typeof TENSORSWAP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    tswap: TAccountMetas[0];
    nftSource: TAccountMetas[1];
    nftMint: TAccountMetas[2];
    nftEscrow: TAccountMetas[3];
    singleListing: TAccountMetas[4];
    owner: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
    payer: TAccountMetas[8];
  };
  data: ListT22InstructionData;
};

export function parseListT22Instruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedListT22Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      tswap: getNextAccount(),
      nftSource: getNextAccount(),
      nftMint: getNextAccount(),
      nftEscrow: getNextAccount(),
      singleListing: getNextAccount(),
      owner: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      payer: getNextAccount(),
    },
    data: getListT22InstructionDataDecoder().decode(instruction.data),
  };
}
