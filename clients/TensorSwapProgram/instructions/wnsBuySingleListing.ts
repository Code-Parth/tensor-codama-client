/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { TENSORSWAP_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";

export const WNS_BUY_SINGLE_LISTING_DISCRIMINATOR = new Uint8Array([
  28, 14, 132, 207, 212, 248, 121, 199,
]);

export function getWnsBuySingleListingDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WNS_BUY_SINGLE_LISTING_DISCRIMINATOR,
  );
}

export type WnsBuySingleListingInstruction<
  TProgram extends string = typeof TENSORSWAP_PROGRAM_ADDRESS,
  TAccountTswap extends string | IAccountMeta<string> = string,
  TAccountFeeVault extends string | IAccountMeta<string> = string,
  TAccountSingleListing extends string | IAccountMeta<string> = string,
  TAccountNftBuyerAcc extends string | IAccountMeta<string> = string,
  TAccountNftMint extends string | IAccountMeta<string> = string,
  TAccountNftEscrow extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountBuyer extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountAssociatedTokenProgram extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = "11111111111111111111111111111111",
  TAccountTakerBroker extends string | IAccountMeta<string> = string,
  TAccountApproveAccount extends string | IAccountMeta<string> = string,
  TAccountDistribution extends string | IAccountMeta<string> = string,
  TAccountWnsProgram extends string | IAccountMeta<string> = string,
  TAccountDistributionProgram extends string | IAccountMeta<string> = string,
  TAccountExtraMetas extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountTswap extends string
        ? ReadonlyAccount<TAccountTswap>
        : TAccountTswap,
      TAccountFeeVault extends string
        ? WritableAccount<TAccountFeeVault>
        : TAccountFeeVault,
      TAccountSingleListing extends string
        ? WritableAccount<TAccountSingleListing>
        : TAccountSingleListing,
      TAccountNftBuyerAcc extends string
        ? WritableAccount<TAccountNftBuyerAcc>
        : TAccountNftBuyerAcc,
      TAccountNftMint extends string
        ? ReadonlyAccount<TAccountNftMint>
        : TAccountNftMint,
      TAccountNftEscrow extends string
        ? WritableAccount<TAccountNftEscrow>
        : TAccountNftEscrow,
      TAccountOwner extends string
        ? WritableAccount<TAccountOwner>
        : TAccountOwner,
      TAccountBuyer extends string
        ? WritableSignerAccount<TAccountBuyer> &
            IAccountSignerMeta<TAccountBuyer>
        : TAccountBuyer,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTakerBroker extends string
        ? WritableAccount<TAccountTakerBroker>
        : TAccountTakerBroker,
      TAccountApproveAccount extends string
        ? WritableAccount<TAccountApproveAccount>
        : TAccountApproveAccount,
      TAccountDistribution extends string
        ? WritableAccount<TAccountDistribution>
        : TAccountDistribution,
      TAccountWnsProgram extends string
        ? ReadonlyAccount<TAccountWnsProgram>
        : TAccountWnsProgram,
      TAccountDistributionProgram extends string
        ? ReadonlyAccount<TAccountDistributionProgram>
        : TAccountDistributionProgram,
      TAccountExtraMetas extends string
        ? ReadonlyAccount<TAccountExtraMetas>
        : TAccountExtraMetas,
      ...TRemainingAccounts,
    ]
  >;

export type WnsBuySingleListingInstructionData = {
  discriminator: ReadonlyUint8Array;
  maxPrice: bigint;
};

export type WnsBuySingleListingInstructionDataArgs = {
  maxPrice: number | bigint;
};

export function getWnsBuySingleListingInstructionDataEncoder(): Encoder<WnsBuySingleListingInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["maxPrice", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: WNS_BUY_SINGLE_LISTING_DISCRIMINATOR,
    }),
  );
}

export function getWnsBuySingleListingInstructionDataDecoder(): Decoder<WnsBuySingleListingInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["maxPrice", getU64Decoder()],
  ]);
}

export function getWnsBuySingleListingInstructionDataCodec(): Codec<
  WnsBuySingleListingInstructionDataArgs,
  WnsBuySingleListingInstructionData
> {
  return combineCodec(
    getWnsBuySingleListingInstructionDataEncoder(),
    getWnsBuySingleListingInstructionDataDecoder(),
  );
}

export type WnsBuySingleListingInput<
  TAccountTswap extends string = string,
  TAccountFeeVault extends string = string,
  TAccountSingleListing extends string = string,
  TAccountNftBuyerAcc extends string = string,
  TAccountNftMint extends string = string,
  TAccountNftEscrow extends string = string,
  TAccountOwner extends string = string,
  TAccountBuyer extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTakerBroker extends string = string,
  TAccountApproveAccount extends string = string,
  TAccountDistribution extends string = string,
  TAccountWnsProgram extends string = string,
  TAccountDistributionProgram extends string = string,
  TAccountExtraMetas extends string = string,
> = {
  tswap: Address<TAccountTswap>;
  feeVault: Address<TAccountFeeVault>;
  singleListing: Address<TAccountSingleListing>;
  nftBuyerAcc: Address<TAccountNftBuyerAcc>;
  nftMint: Address<TAccountNftMint>;
  /**
   * Implicitly checked via transfer. Will fail if wrong account.
   * This is closed below (dest = owner)
   */
  nftEscrow: Address<TAccountNftEscrow>;
  owner: Address<TAccountOwner>;
  buyer: TransactionSigner<TAccountBuyer>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  takerBroker: Address<TAccountTakerBroker>;
  approveAccount: Address<TAccountApproveAccount>;
  distribution: Address<TAccountDistribution>;
  wnsProgram: Address<TAccountWnsProgram>;
  distributionProgram: Address<TAccountDistributionProgram>;
  extraMetas: Address<TAccountExtraMetas>;
  maxPrice: WnsBuySingleListingInstructionDataArgs["maxPrice"];
};

export function getWnsBuySingleListingInstruction<
  TAccountTswap extends string,
  TAccountFeeVault extends string,
  TAccountSingleListing extends string,
  TAccountNftBuyerAcc extends string,
  TAccountNftMint extends string,
  TAccountNftEscrow extends string,
  TAccountOwner extends string,
  TAccountBuyer extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountTakerBroker extends string,
  TAccountApproveAccount extends string,
  TAccountDistribution extends string,
  TAccountWnsProgram extends string,
  TAccountDistributionProgram extends string,
  TAccountExtraMetas extends string,
  TProgramAddress extends Address = typeof TENSORSWAP_PROGRAM_ADDRESS,
>(
  input: WnsBuySingleListingInput<
    TAccountTswap,
    TAccountFeeVault,
    TAccountSingleListing,
    TAccountNftBuyerAcc,
    TAccountNftMint,
    TAccountNftEscrow,
    TAccountOwner,
    TAccountBuyer,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountTakerBroker,
    TAccountApproveAccount,
    TAccountDistribution,
    TAccountWnsProgram,
    TAccountDistributionProgram,
    TAccountExtraMetas
  >,
  config?: { programAddress?: TProgramAddress },
): WnsBuySingleListingInstruction<
  TProgramAddress,
  TAccountTswap,
  TAccountFeeVault,
  TAccountSingleListing,
  TAccountNftBuyerAcc,
  TAccountNftMint,
  TAccountNftEscrow,
  TAccountOwner,
  TAccountBuyer,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram,
  TAccountTakerBroker,
  TAccountApproveAccount,
  TAccountDistribution,
  TAccountWnsProgram,
  TAccountDistributionProgram,
  TAccountExtraMetas
> {
  // Program address.
  const programAddress = config?.programAddress ?? TENSORSWAP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    tswap: { value: input.tswap ?? null, isWritable: false },
    feeVault: { value: input.feeVault ?? null, isWritable: true },
    singleListing: { value: input.singleListing ?? null, isWritable: true },
    nftBuyerAcc: { value: input.nftBuyerAcc ?? null, isWritable: true },
    nftMint: { value: input.nftMint ?? null, isWritable: false },
    nftEscrow: { value: input.nftEscrow ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    buyer: { value: input.buyer ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    takerBroker: { value: input.takerBroker ?? null, isWritable: true },
    approveAccount: { value: input.approveAccount ?? null, isWritable: true },
    distribution: { value: input.distribution ?? null, isWritable: true },
    wnsProgram: { value: input.wnsProgram ?? null, isWritable: false },
    distributionProgram: {
      value: input.distributionProgram ?? null,
      isWritable: false,
    },
    extraMetas: { value: input.extraMetas ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.tswap),
      getAccountMeta(accounts.feeVault),
      getAccountMeta(accounts.singleListing),
      getAccountMeta(accounts.nftBuyerAcc),
      getAccountMeta(accounts.nftMint),
      getAccountMeta(accounts.nftEscrow),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.buyer),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.takerBroker),
      getAccountMeta(accounts.approveAccount),
      getAccountMeta(accounts.distribution),
      getAccountMeta(accounts.wnsProgram),
      getAccountMeta(accounts.distributionProgram),
      getAccountMeta(accounts.extraMetas),
    ],
    programAddress,
    data: getWnsBuySingleListingInstructionDataEncoder().encode(
      args as WnsBuySingleListingInstructionDataArgs,
    ),
  } as WnsBuySingleListingInstruction<
    TProgramAddress,
    TAccountTswap,
    TAccountFeeVault,
    TAccountSingleListing,
    TAccountNftBuyerAcc,
    TAccountNftMint,
    TAccountNftEscrow,
    TAccountOwner,
    TAccountBuyer,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountTakerBroker,
    TAccountApproveAccount,
    TAccountDistribution,
    TAccountWnsProgram,
    TAccountDistributionProgram,
    TAccountExtraMetas
  >;

  return instruction;
}

export type ParsedWnsBuySingleListingInstruction<
  TProgram extends string = typeof TENSORSWAP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    tswap: TAccountMetas[0];
    feeVault: TAccountMetas[1];
    singleListing: TAccountMetas[2];
    nftBuyerAcc: TAccountMetas[3];
    nftMint: TAccountMetas[4];
    /**
     * Implicitly checked via transfer. Will fail if wrong account.
     * This is closed below (dest = owner)
     */

    nftEscrow: TAccountMetas[5];
    owner: TAccountMetas[6];
    buyer: TAccountMetas[7];
    tokenProgram: TAccountMetas[8];
    associatedTokenProgram: TAccountMetas[9];
    systemProgram: TAccountMetas[10];
    takerBroker: TAccountMetas[11];
    approveAccount: TAccountMetas[12];
    distribution: TAccountMetas[13];
    wnsProgram: TAccountMetas[14];
    distributionProgram: TAccountMetas[15];
    extraMetas: TAccountMetas[16];
  };
  data: WnsBuySingleListingInstructionData;
};

export function parseWnsBuySingleListingInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedWnsBuySingleListingInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 17) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      tswap: getNextAccount(),
      feeVault: getNextAccount(),
      singleListing: getNextAccount(),
      nftBuyerAcc: getNextAccount(),
      nftMint: getNextAccount(),
      nftEscrow: getNextAccount(),
      owner: getNextAccount(),
      buyer: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      takerBroker: getNextAccount(),
      approveAccount: getNextAccount(),
      distribution: getNextAccount(),
      wnsProgram: getNextAccount(),
      distributionProgram: getNextAccount(),
      extraMetas: getNextAccount(),
    },
    data: getWnsBuySingleListingInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
