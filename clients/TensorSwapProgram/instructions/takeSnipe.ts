/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
} from "@solana/kit";
import { TENSORSWAP_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";
import {
  getAuthorizationDataLocalDecoder,
  getAuthorizationDataLocalEncoder,
  getPoolConfigDecoder,
  getPoolConfigEncoder,
  type AuthorizationDataLocal,
  type AuthorizationDataLocalArgs,
  type PoolConfig,
  type PoolConfigArgs,
} from "../types";

export const TAKE_SNIPE_DISCRIMINATOR = new Uint8Array([
  10, 151, 48, 226, 248, 24, 227, 231,
]);

export function getTakeSnipeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(TAKE_SNIPE_DISCRIMINATOR);
}

export type TakeSnipeInstruction<
  TProgram extends string = typeof TENSORSWAP_PROGRAM_ADDRESS,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type TakeSnipeInstructionData = {
  discriminator: ReadonlyUint8Array;
  config: PoolConfig;
  actualPrice: bigint;
  authorizationData: Option<AuthorizationDataLocal>;
};

export type TakeSnipeInstructionDataArgs = {
  config: PoolConfigArgs;
  actualPrice: number | bigint;
  authorizationData: OptionOrNullable<AuthorizationDataLocalArgs>;
};

export function getTakeSnipeInstructionDataEncoder(): Encoder<TakeSnipeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["config", getPoolConfigEncoder()],
      ["actualPrice", getU64Encoder()],
      [
        "authorizationData",
        getOptionEncoder(getAuthorizationDataLocalEncoder()),
      ],
    ]),
    (value) => ({ ...value, discriminator: TAKE_SNIPE_DISCRIMINATOR }),
  );
}

export function getTakeSnipeInstructionDataDecoder(): Decoder<TakeSnipeInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["config", getPoolConfigDecoder()],
    ["actualPrice", getU64Decoder()],
    ["authorizationData", getOptionDecoder(getAuthorizationDataLocalDecoder())],
  ]);
}

export function getTakeSnipeInstructionDataCodec(): Codec<
  TakeSnipeInstructionDataArgs,
  TakeSnipeInstructionData
> {
  return combineCodec(
    getTakeSnipeInstructionDataEncoder(),
    getTakeSnipeInstructionDataDecoder(),
  );
}

export type TakeSnipeInput<TAccountSystemProgram extends string = string> = {
  systemProgram?: Address<TAccountSystemProgram>;
  config: TakeSnipeInstructionDataArgs["config"];
  actualPrice: TakeSnipeInstructionDataArgs["actualPrice"];
  authorizationData: TakeSnipeInstructionDataArgs["authorizationData"];
};

export function getTakeSnipeInstruction<
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof TENSORSWAP_PROGRAM_ADDRESS,
>(
  input: TakeSnipeInput<TAccountSystemProgram>,
  config?: { programAddress?: TProgramAddress },
): TakeSnipeInstruction<TProgramAddress, TAccountSystemProgram> {
  // Program address.
  const programAddress = config?.programAddress ?? TENSORSWAP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [getAccountMeta(accounts.systemProgram)],
    programAddress,
    data: getTakeSnipeInstructionDataEncoder().encode(
      args as TakeSnipeInstructionDataArgs,
    ),
  } as TakeSnipeInstruction<TProgramAddress, TAccountSystemProgram>;

  return instruction;
}

export type ParsedTakeSnipeInstruction<
  TProgram extends string = typeof TENSORSWAP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    systemProgram: TAccountMetas[0];
  };
  data: TakeSnipeInstructionData;
};

export function parseTakeSnipeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedTakeSnipeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      systemProgram: getNextAccount(),
    },
    data: getTakeSnipeInstructionDataDecoder().decode(instruction.data),
  };
}
