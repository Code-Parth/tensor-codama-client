/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from "@solana/kit";
import {
  type ParsedAttachPoolToMarginInstruction,
  type ParsedBuyNftInstruction,
  type ParsedBuyNftT22Instruction,
  type ParsedBuySingleListingInstruction,
  type ParsedBuySingleListingT22Instruction,
  type ParsedCloseMarginAccountInstruction,
  type ParsedClosePoolInstruction,
  type ParsedDelistInstruction,
  type ParsedDelistT22Instruction,
  type ParsedDepositMarginAccountInstruction,
  type ParsedDepositNftInstruction,
  type ParsedDepositNftT22Instruction,
  type ParsedDepositSolInstruction,
  type ParsedDetachPoolFromMarginInstruction,
  type ParsedEditPoolInPlaceInstruction,
  type ParsedEditPoolInstruction,
  type ParsedEditSingleListingInstruction,
  type ParsedInitMarginAccountInstruction,
  type ParsedInitPoolInstruction,
  type ParsedInitUpdateTswapInstruction,
  type ParsedListInstruction,
  type ParsedListT22Instruction,
  type ParsedReallocPoolInstruction,
  type ParsedSellNftTokenPoolInstruction,
  type ParsedSellNftTokenPoolT22Instruction,
  type ParsedSellNftTradePoolInstruction,
  type ParsedSellNftTradePoolT22Instruction,
  type ParsedSetPoolFreezeInstruction,
  type ParsedTakeSnipeInstruction,
  type ParsedWithdrawMarginAccountCpiInstruction,
  type ParsedWithdrawMarginAccountCpiTcompInstruction,
  type ParsedWithdrawMarginAccountCpiTlockInstruction,
  type ParsedWithdrawMarginAccountInstruction,
  type ParsedWithdrawMmFeeInstruction,
  type ParsedWithdrawNftInstruction,
  type ParsedWithdrawNftT22Instruction,
  type ParsedWithdrawSolInstruction,
  type ParsedWithdrawTswapFeesInstruction,
  type ParsedWnsBuyNftInstruction,
  type ParsedWnsBuySingleListingInstruction,
  type ParsedWnsDelistInstruction,
  type ParsedWnsDepositNftInstruction,
  type ParsedWnsListInstruction,
  type ParsedWnsSellNftTokenPoolInstruction,
  type ParsedWnsSellNftTradePoolInstruction,
  type ParsedWnsWithdrawNftInstruction,
} from "../instructions";

export const TENSORSWAP_PROGRAM_ADDRESS = "" as Address<"">;

export enum TensorswapAccount {
  TSwap,
  Pool,
  MarginAccount,
  SingleListing,
  NftDepositReceipt,
  NftAuthority,
  SolEscrow,
}

export function identifyTensorswapAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): TensorswapAccount {
  const data = "data" in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([169, 211, 171, 36, 219, 189, 79, 188]),
      ),
      0,
    )
  ) {
    return TensorswapAccount.TSwap;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([241, 154, 109, 4, 17, 177, 109, 188]),
      ),
      0,
    )
  ) {
    return TensorswapAccount.Pool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([133, 220, 173, 213, 179, 211, 43, 238]),
      ),
      0,
    )
  ) {
    return TensorswapAccount.MarginAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([14, 114, 212, 140, 24, 134, 31, 24]),
      ),
      0,
    )
  ) {
    return TensorswapAccount.SingleListing;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([206, 255, 132, 254, 67, 78, 62, 96]),
      ),
      0,
    )
  ) {
    return TensorswapAccount.NftDepositReceipt;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([194, 127, 219, 16, 219, 18, 250, 12]),
      ),
      0,
    )
  ) {
    return TensorswapAccount.NftAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([75, 199, 250, 63, 244, 209, 235, 120]),
      ),
      0,
    )
  ) {
    return TensorswapAccount.SolEscrow;
  }
  throw new Error(
    "The provided account could not be identified as a tensorswap account.",
  );
}

export enum TensorswapInstruction {
  InitUpdateTswap,
  InitPool,
  ClosePool,
  DepositNft,
  WithdrawNft,
  DepositSol,
  WithdrawSol,
  BuyNft,
  SellNftTokenPool,
  SellNftTradePool,
  EditPool,
  ReallocPool,
  InitMarginAccount,
  CloseMarginAccount,
  DepositMarginAccount,
  WithdrawMarginAccount,
  AttachPoolToMargin,
  DetachPoolFromMargin,
  SetPoolFreeze,
  TakeSnipe,
  EditPoolInPlace,
  WithdrawTswapFees,
  List,
  Delist,
  BuySingleListing,
  EditSingleListing,
  WithdrawMmFee,
  WithdrawMarginAccountCpi,
  WithdrawMarginAccountCpiTcomp,
  WithdrawMarginAccountCpiTlock,
  BuyNftT22,
  DepositNftT22,
  SellNftTokenPoolT22,
  SellNftTradePoolT22,
  WithdrawNftT22,
  BuySingleListingT22,
  ListT22,
  DelistT22,
  WnsBuyNft,
  WnsDepositNft,
  WnsSellNftTokenPool,
  WnsSellNftTradePool,
  WnsWithdrawNft,
  WnsBuySingleListing,
  WnsList,
  WnsDelist,
}

export function identifyTensorswapInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): TensorswapInstruction {
  const data = "data" in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([140, 185, 54, 172, 15, 94, 31, 155]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.InitUpdateTswap;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([116, 233, 199, 204, 115, 159, 171, 36]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.InitPool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([140, 189, 209, 23, 239, 62, 239, 11]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.ClosePool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([93, 226, 132, 166, 141, 9, 48, 101]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.DepositNft;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([142, 181, 191, 149, 82, 175, 216, 100]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.WithdrawNft;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([108, 81, 78, 117, 125, 155, 56, 200]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.DepositSol;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([145, 131, 74, 136, 65, 137, 42, 38]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.WithdrawSol;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([96, 0, 28, 190, 49, 107, 83, 222]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.BuyNft;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([57, 44, 192, 48, 83, 8, 107, 48]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.SellNftTokenPool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([131, 82, 125, 77, 13, 157, 36, 90]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.SellNftTradePool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([50, 174, 34, 36, 3, 166, 29, 204]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.EditPool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([114, 128, 37, 167, 71, 227, 40, 178]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.ReallocPool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([10, 54, 68, 252, 130, 97, 39, 52]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.InitMarginAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([105, 215, 41, 239, 166, 207, 1, 103]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.CloseMarginAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([190, 85, 242, 60, 119, 81, 33, 192]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.DepositMarginAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([54, 73, 150, 208, 207, 5, 18, 17]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.WithdrawMarginAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([187, 105, 211, 137, 224, 59, 29, 227]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.AttachPoolToMargin;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([182, 54, 73, 38, 188, 87, 185, 101]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.DetachPoolFromMargin;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([110, 201, 190, 64, 166, 186, 105, 131]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.SetPoolFreeze;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([10, 151, 48, 226, 248, 24, 227, 231]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.TakeSnipe;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([125, 191, 119, 113, 6, 14, 164, 23]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.EditPoolInPlace;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([27, 229, 128, 105, 115, 125, 180, 151]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.WithdrawTswapFees;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([54, 174, 193, 67, 17, 41, 132, 38]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.List;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([55, 136, 205, 107, 107, 173, 4, 31]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.Delist;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([245, 220, 105, 73, 117, 98, 78, 141]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.BuySingleListing;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([88, 38, 236, 212, 31, 185, 18, 166]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.EditSingleListing;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([54, 150, 129, 126, 135, 205, 149, 120]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.WithdrawMmFee;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([186, 26, 199, 134, 220, 177, 32, 72]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.WithdrawMarginAccountCpi;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([201, 156, 163, 27, 243, 14, 36, 237]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.WithdrawMarginAccountCpiTcomp;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([207, 235, 166, 255, 163, 162, 149, 44]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.WithdrawMarginAccountCpiTlock;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([155, 219, 126, 245, 170, 199, 51, 79]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.BuyNftT22;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([208, 34, 6, 147, 95, 218, 49, 160]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.DepositNftT22;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([149, 234, 31, 103, 26, 36, 166, 49]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.SellNftTokenPoolT22;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([124, 145, 23, 52, 72, 113, 85, 9]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.SellNftTradePoolT22;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([112, 55, 80, 231, 181, 190, 92, 12]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.WithdrawNftT22;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([102, 89, 66, 0, 5, 68, 84, 216]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.BuySingleListingT22;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([9, 117, 93, 230, 221, 4, 199, 212]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.ListT22;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([216, 72, 73, 18, 204, 82, 123, 26]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.DelistT22;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([216, 253, 106, 29, 182, 243, 0, 78]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.WnsBuyNft;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([245, 148, 241, 58, 13, 253, 40, 195]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.WnsDepositNft;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([40, 78, 241, 78, 204, 238, 46, 143]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.WnsSellNftTokenPool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([169, 175, 125, 88, 1, 16, 130, 7]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.WnsSellNftTradePool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([51, 152, 143, 163, 1, 238, 156, 119]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.WnsWithdrawNft;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([28, 14, 132, 207, 212, 248, 121, 199]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.WnsBuySingleListing;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([212, 193, 161, 215, 128, 43, 190, 204]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.WnsList;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([131, 226, 161, 134, 233, 132, 243, 159]),
      ),
      0,
    )
  ) {
    return TensorswapInstruction.WnsDelist;
  }
  throw new Error(
    "The provided instruction could not be identified as a tensorswap instruction.",
  );
}

export type ParsedTensorswapInstruction<TProgram extends string = ""> =
  | ({
      instructionType: TensorswapInstruction.InitUpdateTswap;
    } & ParsedInitUpdateTswapInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.InitPool;
    } & ParsedInitPoolInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.ClosePool;
    } & ParsedClosePoolInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.DepositNft;
    } & ParsedDepositNftInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.WithdrawNft;
    } & ParsedWithdrawNftInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.DepositSol;
    } & ParsedDepositSolInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.WithdrawSol;
    } & ParsedWithdrawSolInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.BuyNft;
    } & ParsedBuyNftInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.SellNftTokenPool;
    } & ParsedSellNftTokenPoolInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.SellNftTradePool;
    } & ParsedSellNftTradePoolInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.EditPool;
    } & ParsedEditPoolInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.ReallocPool;
    } & ParsedReallocPoolInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.InitMarginAccount;
    } & ParsedInitMarginAccountInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.CloseMarginAccount;
    } & ParsedCloseMarginAccountInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.DepositMarginAccount;
    } & ParsedDepositMarginAccountInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.WithdrawMarginAccount;
    } & ParsedWithdrawMarginAccountInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.AttachPoolToMargin;
    } & ParsedAttachPoolToMarginInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.DetachPoolFromMargin;
    } & ParsedDetachPoolFromMarginInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.SetPoolFreeze;
    } & ParsedSetPoolFreezeInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.TakeSnipe;
    } & ParsedTakeSnipeInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.EditPoolInPlace;
    } & ParsedEditPoolInPlaceInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.WithdrawTswapFees;
    } & ParsedWithdrawTswapFeesInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.List;
    } & ParsedListInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.Delist;
    } & ParsedDelistInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.BuySingleListing;
    } & ParsedBuySingleListingInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.EditSingleListing;
    } & ParsedEditSingleListingInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.WithdrawMmFee;
    } & ParsedWithdrawMmFeeInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.WithdrawMarginAccountCpi;
    } & ParsedWithdrawMarginAccountCpiInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.WithdrawMarginAccountCpiTcomp;
    } & ParsedWithdrawMarginAccountCpiTcompInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.WithdrawMarginAccountCpiTlock;
    } & ParsedWithdrawMarginAccountCpiTlockInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.BuyNftT22;
    } & ParsedBuyNftT22Instruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.DepositNftT22;
    } & ParsedDepositNftT22Instruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.SellNftTokenPoolT22;
    } & ParsedSellNftTokenPoolT22Instruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.SellNftTradePoolT22;
    } & ParsedSellNftTradePoolT22Instruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.WithdrawNftT22;
    } & ParsedWithdrawNftT22Instruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.BuySingleListingT22;
    } & ParsedBuySingleListingT22Instruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.ListT22;
    } & ParsedListT22Instruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.DelistT22;
    } & ParsedDelistT22Instruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.WnsBuyNft;
    } & ParsedWnsBuyNftInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.WnsDepositNft;
    } & ParsedWnsDepositNftInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.WnsSellNftTokenPool;
    } & ParsedWnsSellNftTokenPoolInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.WnsSellNftTradePool;
    } & ParsedWnsSellNftTradePoolInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.WnsWithdrawNft;
    } & ParsedWnsWithdrawNftInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.WnsBuySingleListing;
    } & ParsedWnsBuySingleListingInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.WnsList;
    } & ParsedWnsListInstruction<TProgram>)
  | ({
      instructionType: TensorswapInstruction.WnsDelist;
    } & ParsedWnsDelistInstruction<TProgram>);
