/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { TCOMP_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";

export const LIST_CORE_DISCRIMINATOR = new Uint8Array([
  173, 76, 167, 125, 118, 71, 1, 153,
]);

export function getListCoreDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(LIST_CORE_DISCRIMINATOR);
}

export type ListCoreInstruction<
  TProgram extends string = typeof TCOMP_PROGRAM_ADDRESS,
  TAccountAsset extends string | IAccountMeta<string> = string,
  TAccountCollection extends string | IAccountMeta<string> = string,
  TAccountListState extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountMplCoreProgram extends
    | string
    | IAccountMeta<string> = "CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d",
  TAccountTcompProgram extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = "11111111111111111111111111111111",
  TAccountPayer extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAsset extends string
        ? WritableAccount<TAccountAsset>
        : TAccountAsset,
      TAccountCollection extends string
        ? ReadonlyAccount<TAccountCollection>
        : TAccountCollection,
      TAccountListState extends string
        ? WritableAccount<TAccountListState>
        : TAccountListState,
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountMplCoreProgram extends string
        ? ReadonlyAccount<TAccountMplCoreProgram>
        : TAccountMplCoreProgram,
      TAccountTcompProgram extends string
        ? ReadonlyAccount<TAccountTcompProgram>
        : TAccountTcompProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      ...TRemainingAccounts,
    ]
  >;

export type ListCoreInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
  expireInSec: Option<bigint>;
  currency: Option<Address>;
  privateTaker: Option<Address>;
  makerBroker: Option<Address>;
};

export type ListCoreInstructionDataArgs = {
  amount: number | bigint;
  expireInSec: OptionOrNullable<number | bigint>;
  currency: OptionOrNullable<Address>;
  privateTaker: OptionOrNullable<Address>;
  makerBroker: OptionOrNullable<Address>;
};

export function getListCoreInstructionDataEncoder(): Encoder<ListCoreInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["amount", getU64Encoder()],
      ["expireInSec", getOptionEncoder(getU64Encoder())],
      ["currency", getOptionEncoder(getAddressEncoder())],
      ["privateTaker", getOptionEncoder(getAddressEncoder())],
      ["makerBroker", getOptionEncoder(getAddressEncoder())],
    ]),
    (value) => ({ ...value, discriminator: LIST_CORE_DISCRIMINATOR }),
  );
}

export function getListCoreInstructionDataDecoder(): Decoder<ListCoreInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["amount", getU64Decoder()],
    ["expireInSec", getOptionDecoder(getU64Decoder())],
    ["currency", getOptionDecoder(getAddressDecoder())],
    ["privateTaker", getOptionDecoder(getAddressDecoder())],
    ["makerBroker", getOptionDecoder(getAddressDecoder())],
  ]);
}

export function getListCoreInstructionDataCodec(): Codec<
  ListCoreInstructionDataArgs,
  ListCoreInstructionData
> {
  return combineCodec(
    getListCoreInstructionDataEncoder(),
    getListCoreInstructionDataDecoder(),
  );
}

export type ListCoreInput<
  TAccountAsset extends string = string,
  TAccountCollection extends string = string,
  TAccountListState extends string = string,
  TAccountOwner extends string = string,
  TAccountMplCoreProgram extends string = string,
  TAccountTcompProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountPayer extends string = string,
> = {
  asset: Address<TAccountAsset>;
  collection?: Address<TAccountCollection>;
  listState: Address<TAccountListState>;
  owner: TransactionSigner<TAccountOwner>;
  mplCoreProgram?: Address<TAccountMplCoreProgram>;
  tcompProgram: Address<TAccountTcompProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  payer: TransactionSigner<TAccountPayer>;
  amount: ListCoreInstructionDataArgs["amount"];
  expireInSec: ListCoreInstructionDataArgs["expireInSec"];
  currency: ListCoreInstructionDataArgs["currency"];
  privateTaker: ListCoreInstructionDataArgs["privateTaker"];
  makerBroker: ListCoreInstructionDataArgs["makerBroker"];
};

export function getListCoreInstruction<
  TAccountAsset extends string,
  TAccountCollection extends string,
  TAccountListState extends string,
  TAccountOwner extends string,
  TAccountMplCoreProgram extends string,
  TAccountTcompProgram extends string,
  TAccountSystemProgram extends string,
  TAccountPayer extends string,
  TProgramAddress extends Address = typeof TCOMP_PROGRAM_ADDRESS,
>(
  input: ListCoreInput<
    TAccountAsset,
    TAccountCollection,
    TAccountListState,
    TAccountOwner,
    TAccountMplCoreProgram,
    TAccountTcompProgram,
    TAccountSystemProgram,
    TAccountPayer
  >,
  config?: { programAddress?: TProgramAddress },
): ListCoreInstruction<
  TProgramAddress,
  TAccountAsset,
  TAccountCollection,
  TAccountListState,
  TAccountOwner,
  TAccountMplCoreProgram,
  TAccountTcompProgram,
  TAccountSystemProgram,
  TAccountPayer
> {
  // Program address.
  const programAddress = config?.programAddress ?? TCOMP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    asset: { value: input.asset ?? null, isWritable: true },
    collection: { value: input.collection ?? null, isWritable: false },
    listState: { value: input.listState ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false },
    mplCoreProgram: { value: input.mplCoreProgram ?? null, isWritable: false },
    tcompProgram: { value: input.tcompProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.mplCoreProgram.value) {
    accounts.mplCoreProgram.value =
      "CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d" as Address<"CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d">;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.asset),
      getAccountMeta(accounts.collection),
      getAccountMeta(accounts.listState),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.mplCoreProgram),
      getAccountMeta(accounts.tcompProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.payer),
    ],
    programAddress,
    data: getListCoreInstructionDataEncoder().encode(
      args as ListCoreInstructionDataArgs,
    ),
  } as ListCoreInstruction<
    TProgramAddress,
    TAccountAsset,
    TAccountCollection,
    TAccountListState,
    TAccountOwner,
    TAccountMplCoreProgram,
    TAccountTcompProgram,
    TAccountSystemProgram,
    TAccountPayer
  >;

  return instruction;
}

export type ParsedListCoreInstruction<
  TProgram extends string = typeof TCOMP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    asset: TAccountMetas[0];
    collection?: TAccountMetas[1] | undefined;
    listState: TAccountMetas[2];
    owner: TAccountMetas[3];
    mplCoreProgram: TAccountMetas[4];
    tcompProgram: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
    payer: TAccountMetas[7];
  };
  data: ListCoreInstructionData;
};

export function parseListCoreInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedListCoreInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === TCOMP_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      asset: getNextAccount(),
      collection: getNextOptionalAccount(),
      listState: getNextAccount(),
      owner: getNextAccount(),
      mplCoreProgram: getNextAccount(),
      tcompProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      payer: getNextAccount(),
    },
    data: getListCoreInstructionDataDecoder().decode(instruction.data),
  };
}
