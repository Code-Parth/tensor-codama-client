/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { TCOMP_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";
import {
  getFieldDecoder,
  getFieldEncoder,
  getTargetDecoder,
  getTargetEncoder,
  type Field,
  type FieldArgs,
  type Target,
  type TargetArgs,
} from "../types";

export const BID_DISCRIMINATOR = new Uint8Array([
  199, 56, 85, 38, 146, 243, 37, 158,
]);

export function getBidDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(BID_DISCRIMINATOR);
}

export type BidInstruction<
  TProgram extends string = typeof TCOMP_PROGRAM_ADDRESS,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = "11111111111111111111111111111111",
  TAccountTcompProgram extends string | IAccountMeta<string> = string,
  TAccountBidState extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountMarginAccount extends string | IAccountMeta<string> = string,
  TAccountCosigner extends string | IAccountMeta<string> = string,
  TAccountRentPayer extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTcompProgram extends string
        ? ReadonlyAccount<TAccountTcompProgram>
        : TAccountTcompProgram,
      TAccountBidState extends string
        ? WritableAccount<TAccountBidState>
        : TAccountBidState,
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountMarginAccount extends string
        ? WritableAccount<TAccountMarginAccount>
        : TAccountMarginAccount,
      TAccountCosigner extends string
        ? ReadonlySignerAccount<TAccountCosigner> &
            IAccountSignerMeta<TAccountCosigner>
        : TAccountCosigner,
      TAccountRentPayer extends string
        ? WritableSignerAccount<TAccountRentPayer> &
            IAccountSignerMeta<TAccountRentPayer>
        : TAccountRentPayer,
      ...TRemainingAccounts,
    ]
  >;

export type BidInstructionData = {
  discriminator: ReadonlyUint8Array;
  bidId: Address;
  target: Target;
  targetId: Address;
  field: Option<Field>;
  fieldId: Option<Address>;
  amount: bigint;
  quantity: number;
  expireInSec: Option<bigint>;
  currency: Option<Address>;
  privateTaker: Option<Address>;
  makerBroker: Option<Address>;
};

export type BidInstructionDataArgs = {
  bidId: Address;
  target: TargetArgs;
  targetId: Address;
  field: OptionOrNullable<FieldArgs>;
  fieldId: OptionOrNullable<Address>;
  amount: number | bigint;
  quantity: number;
  expireInSec: OptionOrNullable<number | bigint>;
  currency: OptionOrNullable<Address>;
  privateTaker: OptionOrNullable<Address>;
  makerBroker: OptionOrNullable<Address>;
};

export function getBidInstructionDataEncoder(): Encoder<BidInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["bidId", getAddressEncoder()],
      ["target", getTargetEncoder()],
      ["targetId", getAddressEncoder()],
      ["field", getOptionEncoder(getFieldEncoder())],
      ["fieldId", getOptionEncoder(getAddressEncoder())],
      ["amount", getU64Encoder()],
      ["quantity", getU32Encoder()],
      ["expireInSec", getOptionEncoder(getU64Encoder())],
      ["currency", getOptionEncoder(getAddressEncoder())],
      ["privateTaker", getOptionEncoder(getAddressEncoder())],
      ["makerBroker", getOptionEncoder(getAddressEncoder())],
    ]),
    (value) => ({ ...value, discriminator: BID_DISCRIMINATOR }),
  );
}

export function getBidInstructionDataDecoder(): Decoder<BidInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["bidId", getAddressDecoder()],
    ["target", getTargetDecoder()],
    ["targetId", getAddressDecoder()],
    ["field", getOptionDecoder(getFieldDecoder())],
    ["fieldId", getOptionDecoder(getAddressDecoder())],
    ["amount", getU64Decoder()],
    ["quantity", getU32Decoder()],
    ["expireInSec", getOptionDecoder(getU64Decoder())],
    ["currency", getOptionDecoder(getAddressDecoder())],
    ["privateTaker", getOptionDecoder(getAddressDecoder())],
    ["makerBroker", getOptionDecoder(getAddressDecoder())],
  ]);
}

export function getBidInstructionDataCodec(): Codec<
  BidInstructionDataArgs,
  BidInstructionData
> {
  return combineCodec(
    getBidInstructionDataEncoder(),
    getBidInstructionDataDecoder(),
  );
}

export type BidInput<
  TAccountSystemProgram extends string = string,
  TAccountTcompProgram extends string = string,
  TAccountBidState extends string = string,
  TAccountOwner extends string = string,
  TAccountMarginAccount extends string = string,
  TAccountCosigner extends string = string,
  TAccountRentPayer extends string = string,
> = {
  systemProgram?: Address<TAccountSystemProgram>;
  tcompProgram: Address<TAccountTcompProgram>;
  bidState: Address<TAccountBidState>;
  owner: TransactionSigner<TAccountOwner>;
  marginAccount: Address<TAccountMarginAccount>;
  cosigner: TransactionSigner<TAccountCosigner>;
  rentPayer: TransactionSigner<TAccountRentPayer>;
  bidId: BidInstructionDataArgs["bidId"];
  target: BidInstructionDataArgs["target"];
  targetId: BidInstructionDataArgs["targetId"];
  field: BidInstructionDataArgs["field"];
  fieldId: BidInstructionDataArgs["fieldId"];
  amount: BidInstructionDataArgs["amount"];
  quantity: BidInstructionDataArgs["quantity"];
  expireInSec: BidInstructionDataArgs["expireInSec"];
  currency: BidInstructionDataArgs["currency"];
  privateTaker: BidInstructionDataArgs["privateTaker"];
  makerBroker: BidInstructionDataArgs["makerBroker"];
};

export function getBidInstruction<
  TAccountSystemProgram extends string,
  TAccountTcompProgram extends string,
  TAccountBidState extends string,
  TAccountOwner extends string,
  TAccountMarginAccount extends string,
  TAccountCosigner extends string,
  TAccountRentPayer extends string,
  TProgramAddress extends Address = typeof TCOMP_PROGRAM_ADDRESS,
>(
  input: BidInput<
    TAccountSystemProgram,
    TAccountTcompProgram,
    TAccountBidState,
    TAccountOwner,
    TAccountMarginAccount,
    TAccountCosigner,
    TAccountRentPayer
  >,
  config?: { programAddress?: TProgramAddress },
): BidInstruction<
  TProgramAddress,
  TAccountSystemProgram,
  TAccountTcompProgram,
  TAccountBidState,
  TAccountOwner,
  TAccountMarginAccount,
  TAccountCosigner,
  TAccountRentPayer
> {
  // Program address.
  const programAddress = config?.programAddress ?? TCOMP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tcompProgram: { value: input.tcompProgram ?? null, isWritable: false },
    bidState: { value: input.bidState ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    marginAccount: { value: input.marginAccount ?? null, isWritable: true },
    cosigner: { value: input.cosigner ?? null, isWritable: false },
    rentPayer: { value: input.rentPayer ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tcompProgram),
      getAccountMeta(accounts.bidState),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.marginAccount),
      getAccountMeta(accounts.cosigner),
      getAccountMeta(accounts.rentPayer),
    ],
    programAddress,
    data: getBidInstructionDataEncoder().encode(args as BidInstructionDataArgs),
  } as BidInstruction<
    TProgramAddress,
    TAccountSystemProgram,
    TAccountTcompProgram,
    TAccountBidState,
    TAccountOwner,
    TAccountMarginAccount,
    TAccountCosigner,
    TAccountRentPayer
  >;

  return instruction;
}

export type ParsedBidInstruction<
  TProgram extends string = typeof TCOMP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    systemProgram: TAccountMetas[0];
    tcompProgram: TAccountMetas[1];
    bidState: TAccountMetas[2];
    owner: TAccountMetas[3];
    marginAccount: TAccountMetas[4];
    cosigner: TAccountMetas[5];
    rentPayer: TAccountMetas[6];
  };
  data: BidInstructionData;
};

export function parseBidInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedBidInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      systemProgram: getNextAccount(),
      tcompProgram: getNextAccount(),
      bidState: getNextAccount(),
      owner: getNextAccount(),
      marginAccount: getNextAccount(),
      cosigner: getNextAccount(),
      rentPayer: getNextAccount(),
    },
    data: getBidInstructionDataDecoder().decode(instruction.data),
  };
}
