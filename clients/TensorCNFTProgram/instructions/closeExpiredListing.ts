/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from "@solana/kit";
import { TCOMP_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";

export const CLOSE_EXPIRED_LISTING_DISCRIMINATOR = new Uint8Array([
  150, 70, 13, 135, 9, 204, 75, 4,
]);

export function getCloseExpiredListingDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLOSE_EXPIRED_LISTING_DISCRIMINATOR,
  );
}

export type CloseExpiredListingInstruction<
  TProgram extends string = typeof TCOMP_PROGRAM_ADDRESS,
  TAccountListState extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = "11111111111111111111111111111111",
  TAccountTcompProgram extends string | IAccountMeta<string> = string,
  TAccountTreeAuthority extends string | IAccountMeta<string> = string,
  TAccountMerkleTree extends string | IAccountMeta<string> = string,
  TAccountLogWrapper extends string | IAccountMeta<string> = string,
  TAccountCompressionProgram extends string | IAccountMeta<string> = string,
  TAccountBubblegumProgram extends string | IAccountMeta<string> = string,
  TAccountRentDest extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountListState extends string
        ? WritableAccount<TAccountListState>
        : TAccountListState,
      TAccountOwner extends string
        ? ReadonlyAccount<TAccountOwner>
        : TAccountOwner,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTcompProgram extends string
        ? ReadonlyAccount<TAccountTcompProgram>
        : TAccountTcompProgram,
      TAccountTreeAuthority extends string
        ? ReadonlyAccount<TAccountTreeAuthority>
        : TAccountTreeAuthority,
      TAccountMerkleTree extends string
        ? WritableAccount<TAccountMerkleTree>
        : TAccountMerkleTree,
      TAccountLogWrapper extends string
        ? ReadonlyAccount<TAccountLogWrapper>
        : TAccountLogWrapper,
      TAccountCompressionProgram extends string
        ? ReadonlyAccount<TAccountCompressionProgram>
        : TAccountCompressionProgram,
      TAccountBubblegumProgram extends string
        ? ReadonlyAccount<TAccountBubblegumProgram>
        : TAccountBubblegumProgram,
      TAccountRentDest extends string
        ? WritableAccount<TAccountRentDest>
        : TAccountRentDest,
      ...TRemainingAccounts,
    ]
  >;

export type CloseExpiredListingInstructionData = {
  discriminator: ReadonlyUint8Array;
  nonce: bigint;
  index: number;
  root: ReadonlyUint8Array;
  dataHash: ReadonlyUint8Array;
  creatorHash: ReadonlyUint8Array;
};

export type CloseExpiredListingInstructionDataArgs = {
  nonce: number | bigint;
  index: number;
  root: ReadonlyUint8Array;
  dataHash: ReadonlyUint8Array;
  creatorHash: ReadonlyUint8Array;
};

export function getCloseExpiredListingInstructionDataEncoder(): Encoder<CloseExpiredListingInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["nonce", getU64Encoder()],
      ["index", getU32Encoder()],
      ["root", fixEncoderSize(getBytesEncoder(), 32)],
      ["dataHash", fixEncoderSize(getBytesEncoder(), 32)],
      ["creatorHash", fixEncoderSize(getBytesEncoder(), 32)],
    ]),
    (value) => ({
      ...value,
      discriminator: CLOSE_EXPIRED_LISTING_DISCRIMINATOR,
    }),
  );
}

export function getCloseExpiredListingInstructionDataDecoder(): Decoder<CloseExpiredListingInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["nonce", getU64Decoder()],
    ["index", getU32Decoder()],
    ["root", fixDecoderSize(getBytesDecoder(), 32)],
    ["dataHash", fixDecoderSize(getBytesDecoder(), 32)],
    ["creatorHash", fixDecoderSize(getBytesDecoder(), 32)],
  ]);
}

export function getCloseExpiredListingInstructionDataCodec(): Codec<
  CloseExpiredListingInstructionDataArgs,
  CloseExpiredListingInstructionData
> {
  return combineCodec(
    getCloseExpiredListingInstructionDataEncoder(),
    getCloseExpiredListingInstructionDataDecoder(),
  );
}

export type CloseExpiredListingInput<
  TAccountListState extends string = string,
  TAccountOwner extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTcompProgram extends string = string,
  TAccountTreeAuthority extends string = string,
  TAccountMerkleTree extends string = string,
  TAccountLogWrapper extends string = string,
  TAccountCompressionProgram extends string = string,
  TAccountBubblegumProgram extends string = string,
  TAccountRentDest extends string = string,
> = {
  listState: Address<TAccountListState>;
  owner: Address<TAccountOwner>;
  systemProgram?: Address<TAccountSystemProgram>;
  tcompProgram: Address<TAccountTcompProgram>;
  treeAuthority: Address<TAccountTreeAuthority>;
  merkleTree: Address<TAccountMerkleTree>;
  logWrapper: Address<TAccountLogWrapper>;
  compressionProgram: Address<TAccountCompressionProgram>;
  bubblegumProgram: Address<TAccountBubblegumProgram>;
  rentDest: Address<TAccountRentDest>;
  nonce: CloseExpiredListingInstructionDataArgs["nonce"];
  index: CloseExpiredListingInstructionDataArgs["index"];
  root: CloseExpiredListingInstructionDataArgs["root"];
  dataHash: CloseExpiredListingInstructionDataArgs["dataHash"];
  creatorHash: CloseExpiredListingInstructionDataArgs["creatorHash"];
};

export function getCloseExpiredListingInstruction<
  TAccountListState extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TAccountTcompProgram extends string,
  TAccountTreeAuthority extends string,
  TAccountMerkleTree extends string,
  TAccountLogWrapper extends string,
  TAccountCompressionProgram extends string,
  TAccountBubblegumProgram extends string,
  TAccountRentDest extends string,
  TProgramAddress extends Address = typeof TCOMP_PROGRAM_ADDRESS,
>(
  input: CloseExpiredListingInput<
    TAccountListState,
    TAccountOwner,
    TAccountSystemProgram,
    TAccountTcompProgram,
    TAccountTreeAuthority,
    TAccountMerkleTree,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountBubblegumProgram,
    TAccountRentDest
  >,
  config?: { programAddress?: TProgramAddress },
): CloseExpiredListingInstruction<
  TProgramAddress,
  TAccountListState,
  TAccountOwner,
  TAccountSystemProgram,
  TAccountTcompProgram,
  TAccountTreeAuthority,
  TAccountMerkleTree,
  TAccountLogWrapper,
  TAccountCompressionProgram,
  TAccountBubblegumProgram,
  TAccountRentDest
> {
  // Program address.
  const programAddress = config?.programAddress ?? TCOMP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    listState: { value: input.listState ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tcompProgram: { value: input.tcompProgram ?? null, isWritable: false },
    treeAuthority: { value: input.treeAuthority ?? null, isWritable: false },
    merkleTree: { value: input.merkleTree ?? null, isWritable: true },
    logWrapper: { value: input.logWrapper ?? null, isWritable: false },
    compressionProgram: {
      value: input.compressionProgram ?? null,
      isWritable: false,
    },
    bubblegumProgram: {
      value: input.bubblegumProgram ?? null,
      isWritable: false,
    },
    rentDest: { value: input.rentDest ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.listState),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tcompProgram),
      getAccountMeta(accounts.treeAuthority),
      getAccountMeta(accounts.merkleTree),
      getAccountMeta(accounts.logWrapper),
      getAccountMeta(accounts.compressionProgram),
      getAccountMeta(accounts.bubblegumProgram),
      getAccountMeta(accounts.rentDest),
    ],
    programAddress,
    data: getCloseExpiredListingInstructionDataEncoder().encode(
      args as CloseExpiredListingInstructionDataArgs,
    ),
  } as CloseExpiredListingInstruction<
    TProgramAddress,
    TAccountListState,
    TAccountOwner,
    TAccountSystemProgram,
    TAccountTcompProgram,
    TAccountTreeAuthority,
    TAccountMerkleTree,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountBubblegumProgram,
    TAccountRentDest
  >;

  return instruction;
}

export type ParsedCloseExpiredListingInstruction<
  TProgram extends string = typeof TCOMP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    listState: TAccountMetas[0];
    owner: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
    tcompProgram: TAccountMetas[3];
    treeAuthority: TAccountMetas[4];
    merkleTree: TAccountMetas[5];
    logWrapper: TAccountMetas[6];
    compressionProgram: TAccountMetas[7];
    bubblegumProgram: TAccountMetas[8];
    rentDest: TAccountMetas[9];
  };
  data: CloseExpiredListingInstructionData;
};

export function parseCloseExpiredListingInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedCloseExpiredListingInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      listState: getNextAccount(),
      owner: getNextAccount(),
      systemProgram: getNextAccount(),
      tcompProgram: getNextAccount(),
      treeAuthority: getNextAccount(),
      merkleTree: getNextAccount(),
      logWrapper: getNextAccount(),
      compressionProgram: getNextAccount(),
      bubblegumProgram: getNextAccount(),
      rentDest: getNextAccount(),
    },
    data: getCloseExpiredListingInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
