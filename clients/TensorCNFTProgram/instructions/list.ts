/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { TCOMP_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";

export const LIST_DISCRIMINATOR = new Uint8Array([
  54, 174, 193, 67, 17, 41, 132, 38,
]);

export function getListDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(LIST_DISCRIMINATOR);
}

export type ListInstruction<
  TProgram extends string = typeof TCOMP_PROGRAM_ADDRESS,
  TAccountTreeAuthority extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountDelegate extends string | IAccountMeta<string> = string,
  TAccountMerkleTree extends string | IAccountMeta<string> = string,
  TAccountLogWrapper extends string | IAccountMeta<string> = string,
  TAccountCompressionProgram extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = "11111111111111111111111111111111",
  TAccountBubblegumProgram extends string | IAccountMeta<string> = string,
  TAccountTcompProgram extends string | IAccountMeta<string> = string,
  TAccountListState extends string | IAccountMeta<string> = string,
  TAccountRentPayer extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountTreeAuthority extends string
        ? ReadonlyAccount<TAccountTreeAuthority>
        : TAccountTreeAuthority,
      TAccountOwner extends string
        ? ReadonlyAccount<TAccountOwner>
        : TAccountOwner,
      TAccountDelegate extends string
        ? ReadonlyAccount<TAccountDelegate>
        : TAccountDelegate,
      TAccountMerkleTree extends string
        ? WritableAccount<TAccountMerkleTree>
        : TAccountMerkleTree,
      TAccountLogWrapper extends string
        ? ReadonlyAccount<TAccountLogWrapper>
        : TAccountLogWrapper,
      TAccountCompressionProgram extends string
        ? ReadonlyAccount<TAccountCompressionProgram>
        : TAccountCompressionProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountBubblegumProgram extends string
        ? ReadonlyAccount<TAccountBubblegumProgram>
        : TAccountBubblegumProgram,
      TAccountTcompProgram extends string
        ? ReadonlyAccount<TAccountTcompProgram>
        : TAccountTcompProgram,
      TAccountListState extends string
        ? WritableAccount<TAccountListState>
        : TAccountListState,
      TAccountRentPayer extends string
        ? WritableSignerAccount<TAccountRentPayer> &
            IAccountSignerMeta<TAccountRentPayer>
        : TAccountRentPayer,
      ...TRemainingAccounts,
    ]
  >;

export type ListInstructionData = {
  discriminator: ReadonlyUint8Array;
  nonce: bigint;
  index: number;
  root: ReadonlyUint8Array;
  dataHash: ReadonlyUint8Array;
  creatorHash: ReadonlyUint8Array;
  amount: bigint;
  expireInSec: Option<bigint>;
  currency: Option<Address>;
  privateTaker: Option<Address>;
  makerBroker: Option<Address>;
};

export type ListInstructionDataArgs = {
  nonce: number | bigint;
  index: number;
  root: ReadonlyUint8Array;
  dataHash: ReadonlyUint8Array;
  creatorHash: ReadonlyUint8Array;
  amount: number | bigint;
  expireInSec: OptionOrNullable<number | bigint>;
  currency: OptionOrNullable<Address>;
  privateTaker: OptionOrNullable<Address>;
  makerBroker: OptionOrNullable<Address>;
};

export function getListInstructionDataEncoder(): Encoder<ListInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["nonce", getU64Encoder()],
      ["index", getU32Encoder()],
      ["root", fixEncoderSize(getBytesEncoder(), 32)],
      ["dataHash", fixEncoderSize(getBytesEncoder(), 32)],
      ["creatorHash", fixEncoderSize(getBytesEncoder(), 32)],
      ["amount", getU64Encoder()],
      ["expireInSec", getOptionEncoder(getU64Encoder())],
      ["currency", getOptionEncoder(getAddressEncoder())],
      ["privateTaker", getOptionEncoder(getAddressEncoder())],
      ["makerBroker", getOptionEncoder(getAddressEncoder())],
    ]),
    (value) => ({ ...value, discriminator: LIST_DISCRIMINATOR }),
  );
}

export function getListInstructionDataDecoder(): Decoder<ListInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["nonce", getU64Decoder()],
    ["index", getU32Decoder()],
    ["root", fixDecoderSize(getBytesDecoder(), 32)],
    ["dataHash", fixDecoderSize(getBytesDecoder(), 32)],
    ["creatorHash", fixDecoderSize(getBytesDecoder(), 32)],
    ["amount", getU64Decoder()],
    ["expireInSec", getOptionDecoder(getU64Decoder())],
    ["currency", getOptionDecoder(getAddressDecoder())],
    ["privateTaker", getOptionDecoder(getAddressDecoder())],
    ["makerBroker", getOptionDecoder(getAddressDecoder())],
  ]);
}

export function getListInstructionDataCodec(): Codec<
  ListInstructionDataArgs,
  ListInstructionData
> {
  return combineCodec(
    getListInstructionDataEncoder(),
    getListInstructionDataDecoder(),
  );
}

export type ListInput<
  TAccountTreeAuthority extends string = string,
  TAccountOwner extends string = string,
  TAccountDelegate extends string = string,
  TAccountMerkleTree extends string = string,
  TAccountLogWrapper extends string = string,
  TAccountCompressionProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountBubblegumProgram extends string = string,
  TAccountTcompProgram extends string = string,
  TAccountListState extends string = string,
  TAccountRentPayer extends string = string,
> = {
  treeAuthority: Address<TAccountTreeAuthority>;
  owner: Address<TAccountOwner>;
  delegate: Address<TAccountDelegate>;
  merkleTree: Address<TAccountMerkleTree>;
  logWrapper: Address<TAccountLogWrapper>;
  compressionProgram: Address<TAccountCompressionProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  bubblegumProgram: Address<TAccountBubblegumProgram>;
  tcompProgram: Address<TAccountTcompProgram>;
  listState: Address<TAccountListState>;
  rentPayer: TransactionSigner<TAccountRentPayer>;
  nonce: ListInstructionDataArgs["nonce"];
  index: ListInstructionDataArgs["index"];
  root: ListInstructionDataArgs["root"];
  dataHash: ListInstructionDataArgs["dataHash"];
  creatorHash: ListInstructionDataArgs["creatorHash"];
  amount: ListInstructionDataArgs["amount"];
  expireInSec: ListInstructionDataArgs["expireInSec"];
  currency: ListInstructionDataArgs["currency"];
  privateTaker: ListInstructionDataArgs["privateTaker"];
  makerBroker: ListInstructionDataArgs["makerBroker"];
};

export function getListInstruction<
  TAccountTreeAuthority extends string,
  TAccountOwner extends string,
  TAccountDelegate extends string,
  TAccountMerkleTree extends string,
  TAccountLogWrapper extends string,
  TAccountCompressionProgram extends string,
  TAccountSystemProgram extends string,
  TAccountBubblegumProgram extends string,
  TAccountTcompProgram extends string,
  TAccountListState extends string,
  TAccountRentPayer extends string,
  TProgramAddress extends Address = typeof TCOMP_PROGRAM_ADDRESS,
>(
  input: ListInput<
    TAccountTreeAuthority,
    TAccountOwner,
    TAccountDelegate,
    TAccountMerkleTree,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram,
    TAccountBubblegumProgram,
    TAccountTcompProgram,
    TAccountListState,
    TAccountRentPayer
  >,
  config?: { programAddress?: TProgramAddress },
): ListInstruction<
  TProgramAddress,
  TAccountTreeAuthority,
  TAccountOwner,
  TAccountDelegate,
  TAccountMerkleTree,
  TAccountLogWrapper,
  TAccountCompressionProgram,
  TAccountSystemProgram,
  TAccountBubblegumProgram,
  TAccountTcompProgram,
  TAccountListState,
  TAccountRentPayer
> {
  // Program address.
  const programAddress = config?.programAddress ?? TCOMP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    treeAuthority: { value: input.treeAuthority ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: false },
    delegate: { value: input.delegate ?? null, isWritable: false },
    merkleTree: { value: input.merkleTree ?? null, isWritable: true },
    logWrapper: { value: input.logWrapper ?? null, isWritable: false },
    compressionProgram: {
      value: input.compressionProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    bubblegumProgram: {
      value: input.bubblegumProgram ?? null,
      isWritable: false,
    },
    tcompProgram: { value: input.tcompProgram ?? null, isWritable: false },
    listState: { value: input.listState ?? null, isWritable: true },
    rentPayer: { value: input.rentPayer ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.treeAuthority),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.delegate),
      getAccountMeta(accounts.merkleTree),
      getAccountMeta(accounts.logWrapper),
      getAccountMeta(accounts.compressionProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.bubblegumProgram),
      getAccountMeta(accounts.tcompProgram),
      getAccountMeta(accounts.listState),
      getAccountMeta(accounts.rentPayer),
    ],
    programAddress,
    data: getListInstructionDataEncoder().encode(
      args as ListInstructionDataArgs,
    ),
  } as ListInstruction<
    TProgramAddress,
    TAccountTreeAuthority,
    TAccountOwner,
    TAccountDelegate,
    TAccountMerkleTree,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram,
    TAccountBubblegumProgram,
    TAccountTcompProgram,
    TAccountListState,
    TAccountRentPayer
  >;

  return instruction;
}

export type ParsedListInstruction<
  TProgram extends string = typeof TCOMP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    treeAuthority: TAccountMetas[0];
    owner: TAccountMetas[1];
    delegate: TAccountMetas[2];
    merkleTree: TAccountMetas[3];
    logWrapper: TAccountMetas[4];
    compressionProgram: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
    bubblegumProgram: TAccountMetas[7];
    tcompProgram: TAccountMetas[8];
    listState: TAccountMetas[9];
    rentPayer: TAccountMetas[10];
  };
  data: ListInstructionData;
};

export function parseListInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedListInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      treeAuthority: getNextAccount(),
      owner: getNextAccount(),
      delegate: getNextAccount(),
      merkleTree: getNextAccount(),
      logWrapper: getNextAccount(),
      compressionProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      bubblegumProgram: getNextAccount(),
      tcompProgram: getNextAccount(),
      listState: getNextAccount(),
      rentPayer: getNextAccount(),
    },
    data: getListInstructionDataDecoder().decode(instruction.data),
  };
}
