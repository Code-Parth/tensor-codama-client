/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from "@solana/kit";
import { TCOMP_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";

export const CLOSE_EXPIRED_LISTING_CORE_DISCRIMINATOR = new Uint8Array([
  89, 171, 78, 80, 74, 188, 63, 58,
]);

export function getCloseExpiredListingCoreDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLOSE_EXPIRED_LISTING_CORE_DISCRIMINATOR,
  );
}

export type CloseExpiredListingCoreInstruction<
  TProgram extends string = typeof TCOMP_PROGRAM_ADDRESS,
  TAccountListState extends string | IAccountMeta<string> = string,
  TAccountAsset extends string | IAccountMeta<string> = string,
  TAccountCollection extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountMplCoreProgram extends
    | string
    | IAccountMeta<string> = "CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d",
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = "11111111111111111111111111111111",
  TAccountTcompProgram extends string | IAccountMeta<string> = string,
  TAccountRentDest extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountListState extends string
        ? WritableAccount<TAccountListState>
        : TAccountListState,
      TAccountAsset extends string
        ? WritableAccount<TAccountAsset>
        : TAccountAsset,
      TAccountCollection extends string
        ? ReadonlyAccount<TAccountCollection>
        : TAccountCollection,
      TAccountOwner extends string
        ? ReadonlyAccount<TAccountOwner>
        : TAccountOwner,
      TAccountMplCoreProgram extends string
        ? ReadonlyAccount<TAccountMplCoreProgram>
        : TAccountMplCoreProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTcompProgram extends string
        ? ReadonlyAccount<TAccountTcompProgram>
        : TAccountTcompProgram,
      TAccountRentDest extends string
        ? WritableAccount<TAccountRentDest>
        : TAccountRentDest,
      ...TRemainingAccounts,
    ]
  >;

export type CloseExpiredListingCoreInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type CloseExpiredListingCoreInstructionDataArgs = object;

export function getCloseExpiredListingCoreInstructionDataEncoder(): Encoder<CloseExpiredListingCoreInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: CLOSE_EXPIRED_LISTING_CORE_DISCRIMINATOR,
    }),
  );
}

export function getCloseExpiredListingCoreInstructionDataDecoder(): Decoder<CloseExpiredListingCoreInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCloseExpiredListingCoreInstructionDataCodec(): Codec<
  CloseExpiredListingCoreInstructionDataArgs,
  CloseExpiredListingCoreInstructionData
> {
  return combineCodec(
    getCloseExpiredListingCoreInstructionDataEncoder(),
    getCloseExpiredListingCoreInstructionDataDecoder(),
  );
}

export type CloseExpiredListingCoreInput<
  TAccountListState extends string = string,
  TAccountAsset extends string = string,
  TAccountCollection extends string = string,
  TAccountOwner extends string = string,
  TAccountMplCoreProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTcompProgram extends string = string,
  TAccountRentDest extends string = string,
> = {
  listState: Address<TAccountListState>;
  asset: Address<TAccountAsset>;
  collection?: Address<TAccountCollection>;
  owner: Address<TAccountOwner>;
  mplCoreProgram?: Address<TAccountMplCoreProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  tcompProgram: Address<TAccountTcompProgram>;
  rentDest: Address<TAccountRentDest>;
};

export function getCloseExpiredListingCoreInstruction<
  TAccountListState extends string,
  TAccountAsset extends string,
  TAccountCollection extends string,
  TAccountOwner extends string,
  TAccountMplCoreProgram extends string,
  TAccountSystemProgram extends string,
  TAccountTcompProgram extends string,
  TAccountRentDest extends string,
  TProgramAddress extends Address = typeof TCOMP_PROGRAM_ADDRESS,
>(
  input: CloseExpiredListingCoreInput<
    TAccountListState,
    TAccountAsset,
    TAccountCollection,
    TAccountOwner,
    TAccountMplCoreProgram,
    TAccountSystemProgram,
    TAccountTcompProgram,
    TAccountRentDest
  >,
  config?: { programAddress?: TProgramAddress },
): CloseExpiredListingCoreInstruction<
  TProgramAddress,
  TAccountListState,
  TAccountAsset,
  TAccountCollection,
  TAccountOwner,
  TAccountMplCoreProgram,
  TAccountSystemProgram,
  TAccountTcompProgram,
  TAccountRentDest
> {
  // Program address.
  const programAddress = config?.programAddress ?? TCOMP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    listState: { value: input.listState ?? null, isWritable: true },
    asset: { value: input.asset ?? null, isWritable: true },
    collection: { value: input.collection ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: false },
    mplCoreProgram: { value: input.mplCoreProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tcompProgram: { value: input.tcompProgram ?? null, isWritable: false },
    rentDest: { value: input.rentDest ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.mplCoreProgram.value) {
    accounts.mplCoreProgram.value =
      "CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d" as Address<"CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d">;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.listState),
      getAccountMeta(accounts.asset),
      getAccountMeta(accounts.collection),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.mplCoreProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tcompProgram),
      getAccountMeta(accounts.rentDest),
    ],
    programAddress,
    data: getCloseExpiredListingCoreInstructionDataEncoder().encode({}),
  } as CloseExpiredListingCoreInstruction<
    TProgramAddress,
    TAccountListState,
    TAccountAsset,
    TAccountCollection,
    TAccountOwner,
    TAccountMplCoreProgram,
    TAccountSystemProgram,
    TAccountTcompProgram,
    TAccountRentDest
  >;

  return instruction;
}

export type ParsedCloseExpiredListingCoreInstruction<
  TProgram extends string = typeof TCOMP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    listState: TAccountMetas[0];
    asset: TAccountMetas[1];
    collection?: TAccountMetas[2] | undefined;
    owner: TAccountMetas[3];
    mplCoreProgram: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
    tcompProgram: TAccountMetas[6];
    rentDest: TAccountMetas[7];
  };
  data: CloseExpiredListingCoreInstructionData;
};

export function parseCloseExpiredListingCoreInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedCloseExpiredListingCoreInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === TCOMP_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      listState: getNextAccount(),
      asset: getNextAccount(),
      collection: getNextOptionalAccount(),
      owner: getNextAccount(),
      mplCoreProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      tcompProgram: getNextAccount(),
      rentDest: getNextAccount(),
    },
    data: getCloseExpiredListingCoreInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
