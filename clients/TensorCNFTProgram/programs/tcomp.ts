/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from "@solana/kit";
import {
  type ParsedBidInstruction,
  type ParsedBuyCoreInstruction,
  type ParsedBuyInstruction,
  type ParsedBuySplInstruction,
  type ParsedCancelBidInstruction,
  type ParsedCloseExpiredBidInstruction,
  type ParsedCloseExpiredListingCoreInstruction,
  type ParsedCloseExpiredListingInstruction,
  type ParsedDelistCoreInstruction,
  type ParsedDelistInstruction,
  type ParsedEditInstruction,
  type ParsedListCoreInstruction,
  type ParsedListInstruction,
  type ParsedTakeBidCoreInstruction,
  type ParsedTakeBidFullMetaInstruction,
  type ParsedTakeBidLegacyInstruction,
  type ParsedTakeBidMetaHashInstruction,
  type ParsedTakeBidT22Instruction,
  type ParsedTakeBidWnsInstruction,
  type ParsedTcompNoopInstruction,
  type ParsedWithdrawFeesInstruction,
} from "../instructions";

export const TCOMP_PROGRAM_ADDRESS = "" as Address<"">;

export enum TcompAccount {
  ListState,
  BidState,
}

export function identifyTcompAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): TcompAccount {
  const data = "data" in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([78, 242, 89, 138, 161, 221, 176, 75]),
      ),
      0,
    )
  ) {
    return TcompAccount.ListState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([155, 197, 5, 97, 189, 60, 8, 183]),
      ),
      0,
    )
  ) {
    return TcompAccount.BidState;
  }
  throw new Error(
    "The provided account could not be identified as a tcomp account.",
  );
}

export enum TcompInstruction {
  TcompNoop,
  WithdrawFees,
  Buy,
  BuySpl,
  BuyCore,
  List,
  Delist,
  Edit,
  ListCore,
  DelistCore,
  Bid,
  CancelBid,
  CloseExpiredBid,
  CloseExpiredListing,
  CloseExpiredListingCore,
  TakeBidMetaHash,
  TakeBidFullMeta,
  TakeBidLegacy,
  TakeBidT22,
  TakeBidWns,
  TakeBidCore,
}

export function identifyTcompInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): TcompInstruction {
  const data = "data" in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([106, 162, 10, 226, 132, 68, 223, 21]),
      ),
      0,
    )
  ) {
    return TcompInstruction.TcompNoop;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([198, 212, 171, 109, 144, 215, 174, 89]),
      ),
      0,
    )
  ) {
    return TcompInstruction.WithdrawFees;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([102, 6, 61, 18, 1, 218, 235, 234]),
      ),
      0,
    )
  ) {
    return TcompInstruction.Buy;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([65, 136, 254, 255, 59, 130, 234, 174]),
      ),
      0,
    )
  ) {
    return TcompInstruction.BuySpl;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([169, 227, 87, 255, 76, 86, 255, 25]),
      ),
      0,
    )
  ) {
    return TcompInstruction.BuyCore;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([54, 174, 193, 67, 17, 41, 132, 38]),
      ),
      0,
    )
  ) {
    return TcompInstruction.List;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([55, 136, 205, 107, 107, 173, 4, 31]),
      ),
      0,
    )
  ) {
    return TcompInstruction.Delist;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([15, 183, 33, 86, 87, 28, 151, 145]),
      ),
      0,
    )
  ) {
    return TcompInstruction.Edit;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([173, 76, 167, 125, 118, 71, 1, 153]),
      ),
      0,
    )
  ) {
    return TcompInstruction.ListCore;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([56, 24, 231, 2, 227, 19, 14, 68]),
      ),
      0,
    )
  ) {
    return TcompInstruction.DelistCore;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([199, 56, 85, 38, 146, 243, 37, 158]),
      ),
      0,
    )
  ) {
    return TcompInstruction.Bid;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([40, 243, 190, 217, 208, 253, 86, 206]),
      ),
      0,
    )
  ) {
    return TcompInstruction.CancelBid;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([83, 20, 105, 67, 248, 68, 104, 190]),
      ),
      0,
    )
  ) {
    return TcompInstruction.CloseExpiredBid;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([150, 70, 13, 135, 9, 204, 75, 4]),
      ),
      0,
    )
  ) {
    return TcompInstruction.CloseExpiredListing;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([89, 171, 78, 80, 74, 188, 63, 58]),
      ),
      0,
    )
  ) {
    return TcompInstruction.CloseExpiredListingCore;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([85, 227, 202, 70, 45, 215, 10, 193]),
      ),
      0,
    )
  ) {
    return TcompInstruction.TakeBidMetaHash;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([242, 194, 203, 225, 234, 53, 10, 96]),
      ),
      0,
    )
  ) {
    return TcompInstruction.TakeBidFullMeta;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([188, 35, 116, 108, 0, 233, 237, 201]),
      ),
      0,
    )
  ) {
    return TcompInstruction.TakeBidLegacy;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([18, 250, 113, 242, 31, 244, 19, 150]),
      ),
      0,
    )
  ) {
    return TcompInstruction.TakeBidT22;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([88, 5, 122, 88, 250, 139, 35, 216]),
      ),
      0,
    )
  ) {
    return TcompInstruction.TakeBidWns;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([250, 41, 248, 20, 61, 161, 27, 141]),
      ),
      0,
    )
  ) {
    return TcompInstruction.TakeBidCore;
  }
  throw new Error(
    "The provided instruction could not be identified as a tcomp instruction.",
  );
}

export type ParsedTcompInstruction<TProgram extends string = ""> =
  | ({
      instructionType: TcompInstruction.TcompNoop;
    } & ParsedTcompNoopInstruction<TProgram>)
  | ({
      instructionType: TcompInstruction.WithdrawFees;
    } & ParsedWithdrawFeesInstruction<TProgram>)
  | ({ instructionType: TcompInstruction.Buy } & ParsedBuyInstruction<TProgram>)
  | ({
      instructionType: TcompInstruction.BuySpl;
    } & ParsedBuySplInstruction<TProgram>)
  | ({
      instructionType: TcompInstruction.BuyCore;
    } & ParsedBuyCoreInstruction<TProgram>)
  | ({
      instructionType: TcompInstruction.List;
    } & ParsedListInstruction<TProgram>)
  | ({
      instructionType: TcompInstruction.Delist;
    } & ParsedDelistInstruction<TProgram>)
  | ({
      instructionType: TcompInstruction.Edit;
    } & ParsedEditInstruction<TProgram>)
  | ({
      instructionType: TcompInstruction.ListCore;
    } & ParsedListCoreInstruction<TProgram>)
  | ({
      instructionType: TcompInstruction.DelistCore;
    } & ParsedDelistCoreInstruction<TProgram>)
  | ({ instructionType: TcompInstruction.Bid } & ParsedBidInstruction<TProgram>)
  | ({
      instructionType: TcompInstruction.CancelBid;
    } & ParsedCancelBidInstruction<TProgram>)
  | ({
      instructionType: TcompInstruction.CloseExpiredBid;
    } & ParsedCloseExpiredBidInstruction<TProgram>)
  | ({
      instructionType: TcompInstruction.CloseExpiredListing;
    } & ParsedCloseExpiredListingInstruction<TProgram>)
  | ({
      instructionType: TcompInstruction.CloseExpiredListingCore;
    } & ParsedCloseExpiredListingCoreInstruction<TProgram>)
  | ({
      instructionType: TcompInstruction.TakeBidMetaHash;
    } & ParsedTakeBidMetaHashInstruction<TProgram>)
  | ({
      instructionType: TcompInstruction.TakeBidFullMeta;
    } & ParsedTakeBidFullMetaInstruction<TProgram>)
  | ({
      instructionType: TcompInstruction.TakeBidLegacy;
    } & ParsedTakeBidLegacyInstruction<TProgram>)
  | ({
      instructionType: TcompInstruction.TakeBidT22;
    } & ParsedTakeBidT22Instruction<TProgram>)
  | ({
      instructionType: TcompInstruction.TakeBidWns;
    } & ParsedTakeBidWnsInstruction<TProgram>)
  | ({
      instructionType: TcompInstruction.TakeBidCore;
    } & ParsedTakeBidCoreInstruction<TProgram>);
